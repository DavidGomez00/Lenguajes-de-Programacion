Grammar:

Rule 0     S' -> _program
Rule 1     _program -> _class ; _program
Rule 2     _program -> _class ;
Rule 3     _class -> CLASS TYPEID INHERITS TYPEID { error }
Rule 4     _class -> CLASS TYPEID INHERITS TYPEID { _feature_list }
Rule 5     _class -> CLASS TYPEID { error }
Rule 6     _class -> CLASS TYPEID { _feature_list }
Rule 7     _feature_list -> error ;
Rule 8     _feature_list -> <empty>
Rule 9     _feature_list -> _feature ;
Rule 10    _feature_list -> _feature ; _feature_list
Rule 11    _feature -> error : TYPEID
Rule 12    _feature -> OBJECTID : error
Rule 13    _feature -> OBJECTID : TYPEID
Rule 14    _feature -> OBJECTID : TYPEID ASSIGN _expr  [precedence=left, level=1]
Rule 15    _feature -> error ( _formal_list ) : TYPEID { _expr }
Rule 16    _feature -> OBJECTID ( error ) : TYPEID { _expr }
Rule 17    _feature -> OBJECTID ( _formal_list ) : TYPEID { _expr }
Rule 18    _formal_list -> <empty>
Rule 19    _formal_list -> _formal
Rule 20    _formal_list -> _formal , _formal_list
Rule 21    _formal -> OBJECTID : TYPEID
Rule 22    _expr -> ( _expr )
Rule 23    _expr -> _expr = _expr  [precedence=nonassoc, level=3]
Rule 24    _expr -> _expr LE _expr  [precedence=nonassoc, level=3]
Rule 25    _expr -> _expr < _expr  [precedence=nonassoc, level=3]
Rule 26    _expr -> _expr / _expr  [precedence=left, level=5]
Rule 27    _expr -> _expr * _expr  [precedence=left, level=5]
Rule 28    _expr -> _expr - _expr  [precedence=left, level=4]
Rule 29    _expr -> _expr + _expr  [precedence=left, level=4]
Rule 30    _expr -> BOOL_CONST
Rule 31    _expr -> STR_CONST
Rule 32    _expr -> INT_CONST
Rule 33    _expr -> OBJECTID
Rule 34    _expr -> ISVOID _expr  [precedence=left, level=6]
Rule 35    _expr -> NOT _expr  [precedence=left, level=2]
Rule 36    _expr -> ~ _expr  [precedence=left, level=7]
Rule 37    _expr -> LET OBJECTID : TYPEID , _listalet
Rule 38    _expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet
Rule 39    _expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet
Rule 40    _expr -> LET OBJECTID : TYPEID IN _expr
Rule 41    _expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr
Rule 42    _expr -> WHILE _expr LOOP _expr POOL
Rule 43    _expr -> IF _expr THEN _expr ELSE _expr FI
Rule 44    _expr -> OBJECTID ( )
Rule 45    _expr -> _expr . OBJECTID ( )
Rule 46    _expr -> OBJECTID ( error )
Rule 47    _expr -> OBJECTID ( _expr_list )
Rule 48    _expr -> _expr . OBJECTID ( _expr_list )
Rule 49    _expr -> _expr @ TYPEID . OBJECTID ( )
Rule 50    _expr -> _expr @ TYPEID . OBJECTID ( _expr_list )
Rule 51    _expr -> OBJECTID ASSIGN _expr  [precedence=left, level=1]
Rule 52    _expr -> CASE _expr OF _lista_case ESAC
Rule 53    _expr -> NEW TYPEID
Rule 54    _expr -> { expresion_block }
Rule 55    expresion_block -> expresion_block _expr ;
Rule 56    expresion_block -> error ;
Rule 57    expresion_block -> _expr ;
Rule 58    _expr_list -> _expr
Rule 59    _expr_list -> _expr , error
Rule 60    _expr_list -> error , _expr_list
Rule 61    _expr_list -> _expr , _expr_list
Rule 62    _rama_case -> OBJECTID : TYPEID DARROW _expr
Rule 63    _lista_case -> <empty>
Rule 64    _lista_case -> _rama_case ; _lista_case
Rule 65    _listalet -> OBJECTID : TYPEID IN _expr
Rule 66    _listalet -> OBJECTID : TYPEID ASSIGN error IN _expr
Rule 67    _listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr
Rule 68    _listalet -> OBJECTID : TYPEID , _listalet
Rule 69    _listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet

Unused terminals:

    ERROR

Terminals, with rules where they appear:

(                    : 15 16 17 22 44 45 46 47 48 49 50
)                    : 15 16 17 22 44 45 46 47 48 49 50
*                    : 27
+                    : 29
,                    : 20 37 38 39 59 60 61 68 69
-                    : 28
.                    : 45 48 49 50
/                    : 26
:                    : 11 12 13 14 15 16 17 21 37 38 39 40 41 62 65 66 67 68 69
;                    : 1 2 7 9 10 55 56 57 64
<                    : 25
=                    : 23
@                    : 49 50
ASSIGN               : 14 38 39 41 51 66 67 69
BOOL_CONST           : 30
CASE                 : 52
CLASS                : 3 4 5 6
DARROW               : 62
ELSE                 : 43
ERROR                : 
ESAC                 : 52
FI                   : 43
IF                   : 43
IN                   : 40 41 65 66 67
INHERITS             : 3 4
INT_CONST            : 32
ISVOID               : 34
LE                   : 24
LET                  : 37 38 39 40 41
LOOP                 : 42
NEW                  : 53
NOT                  : 35
OBJECTID             : 12 13 14 16 17 21 33 37 38 39 40 41 44 45 46 47 48 49 50 51 62 65 66 67 68 69
OF                   : 52
POOL                 : 42
STR_CONST            : 31
THEN                 : 43
TYPEID               : 3 3 4 4 5 6 11 13 14 15 16 17 21 37 38 39 40 41 49 50 53 62 65 66 67 68 69
WHILE                : 42
error                : 3 5 7 11 12 15 16 38 46 56 59 60 66
{                    : 3 4 5 6 15 16 17 54
}                    : 3 4 5 6 15 16 17 54
~                    : 36

Nonterminals, with rules where they appear:

_class               : 1 2
_expr                : 14 15 16 17 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 34 35 36 39 40 41 41 42 42 43 43 43 45 48 49 50 51 52 55 57 58 59 61 62 65 66 67 67 69
_expr_list           : 47 48 50 60 61
_feature             : 9 10
_feature_list        : 4 6 10
_formal              : 19 20
_formal_list         : 15 17 20
_lista_case          : 52 64
_listalet            : 37 38 39 68 69
_program             : 1 0
_rama_case           : 64
expresion_block      : 54 55


state 0

    (0) S' -> . _program
    (1) _program -> . _class ; _program
    (2) _program -> . _class ;
    (3) _class -> . CLASS TYPEID INHERITS TYPEID { error }
    (4) _class -> . CLASS TYPEID INHERITS TYPEID { _feature_list }
    (5) _class -> . CLASS TYPEID { error }
    (6) _class -> . CLASS TYPEID { _feature_list }
    CLASS           shift and go to state 3

    _program                       shift and go to state 1
    _class                         shift and go to state 2

state 1

    (0) S' -> _program .


state 2

    (1) _program -> _class . ; _program
    (2) _program -> _class . ;
    ;               shift and go to state 4


state 3

    (3) _class -> CLASS . TYPEID INHERITS TYPEID { error }
    (4) _class -> CLASS . TYPEID INHERITS TYPEID { _feature_list }
    (5) _class -> CLASS . TYPEID { error }
    (6) _class -> CLASS . TYPEID { _feature_list }
    TYPEID          shift and go to state 5


state 4

    (1) _program -> _class ; . _program
    (2) _program -> _class ; .
    (1) _program -> . _class ; _program
    (2) _program -> . _class ;
    (3) _class -> . CLASS TYPEID INHERITS TYPEID { error }
    (4) _class -> . CLASS TYPEID INHERITS TYPEID { _feature_list }
    (5) _class -> . CLASS TYPEID { error }
    (6) _class -> . CLASS TYPEID { _feature_list }
    $end            reduce using rule 2 (_program -> _class ; .)
    CLASS           shift and go to state 3

    _class                         shift and go to state 2
    _program                       shift and go to state 6

state 5

    (3) _class -> CLASS TYPEID . INHERITS TYPEID { error }
    (4) _class -> CLASS TYPEID . INHERITS TYPEID { _feature_list }
    (5) _class -> CLASS TYPEID . { error }
    (6) _class -> CLASS TYPEID . { _feature_list }
    INHERITS        shift and go to state 7
    {               shift and go to state 8


state 6

    (1) _program -> _class ; _program .
    $end            reduce using rule 1 (_program -> _class ; _program .)


state 7

    (3) _class -> CLASS TYPEID INHERITS . TYPEID { error }
    (4) _class -> CLASS TYPEID INHERITS . TYPEID { _feature_list }
    TYPEID          shift and go to state 9


state 8

    (5) _class -> CLASS TYPEID { . error }
    (6) _class -> CLASS TYPEID { . _feature_list }
    (7) _feature_list -> . error ;
    (8) _feature_list -> .
    (9) _feature_list -> . _feature ;
    (10) _feature_list -> . _feature ; _feature_list
    (11) _feature -> . error : TYPEID
    (12) _feature -> . OBJECTID : error
    (13) _feature -> . OBJECTID : TYPEID
    (14) _feature -> . OBJECTID : TYPEID ASSIGN _expr
    (15) _feature -> . error ( _formal_list ) : TYPEID { _expr }
    (16) _feature -> . OBJECTID ( error ) : TYPEID { _expr }
    (17) _feature -> . OBJECTID ( _formal_list ) : TYPEID { _expr }
    error           shift and go to state 10
    }               reduce using rule 8 (_feature_list -> .)
    OBJECTID        shift and go to state 13

    _feature_list                  shift and go to state 11
    _feature                       shift and go to state 12

state 9

    (3) _class -> CLASS TYPEID INHERITS TYPEID . { error }
    (4) _class -> CLASS TYPEID INHERITS TYPEID . { _feature_list }
    {               shift and go to state 14


state 10

    (5) _class -> CLASS TYPEID { error . }
    (7) _feature_list -> error . ;
    (11) _feature -> error . : TYPEID
    (15) _feature -> error . ( _formal_list ) : TYPEID { _expr }
    }               shift and go to state 15
    ;               shift and go to state 16
    :               shift and go to state 17
    (               shift and go to state 18


state 11

    (6) _class -> CLASS TYPEID { _feature_list . }
    }               shift and go to state 19


state 12

    (9) _feature_list -> _feature . ;
    (10) _feature_list -> _feature . ; _feature_list
    ;               shift and go to state 20


state 13

    (12) _feature -> OBJECTID . : error
    (13) _feature -> OBJECTID . : TYPEID
    (14) _feature -> OBJECTID . : TYPEID ASSIGN _expr
    (16) _feature -> OBJECTID . ( error ) : TYPEID { _expr }
    (17) _feature -> OBJECTID . ( _formal_list ) : TYPEID { _expr }
    :               shift and go to state 21
    (               shift and go to state 22


state 14

    (3) _class -> CLASS TYPEID INHERITS TYPEID { . error }
    (4) _class -> CLASS TYPEID INHERITS TYPEID { . _feature_list }
    (7) _feature_list -> . error ;
    (8) _feature_list -> .
    (9) _feature_list -> . _feature ;
    (10) _feature_list -> . _feature ; _feature_list
    (11) _feature -> . error : TYPEID
    (12) _feature -> . OBJECTID : error
    (13) _feature -> . OBJECTID : TYPEID
    (14) _feature -> . OBJECTID : TYPEID ASSIGN _expr
    (15) _feature -> . error ( _formal_list ) : TYPEID { _expr }
    (16) _feature -> . OBJECTID ( error ) : TYPEID { _expr }
    (17) _feature -> . OBJECTID ( _formal_list ) : TYPEID { _expr }
    error           shift and go to state 23
    }               reduce using rule 8 (_feature_list -> .)
    OBJECTID        shift and go to state 13

    _feature_list                  shift and go to state 24
    _feature                       shift and go to state 12

state 15

    (5) _class -> CLASS TYPEID { error } .
    ;               reduce using rule 5 (_class -> CLASS TYPEID { error } .)


state 16

    (7) _feature_list -> error ; .
    }               reduce using rule 7 (_feature_list -> error ; .)


state 17

    (11) _feature -> error : . TYPEID
    TYPEID          shift and go to state 25


state 18

    (15) _feature -> error ( . _formal_list ) : TYPEID { _expr }
    (18) _formal_list -> .
    (19) _formal_list -> . _formal
    (20) _formal_list -> . _formal , _formal_list
    (21) _formal -> . OBJECTID : TYPEID
    )               reduce using rule 18 (_formal_list -> .)
    OBJECTID        shift and go to state 28

    _formal_list                   shift and go to state 26
    _formal                        shift and go to state 27

state 19

    (6) _class -> CLASS TYPEID { _feature_list } .
    ;               reduce using rule 6 (_class -> CLASS TYPEID { _feature_list } .)


state 20

    (9) _feature_list -> _feature ; .
    (10) _feature_list -> _feature ; . _feature_list
    (7) _feature_list -> . error ;
    (8) _feature_list -> .
    (9) _feature_list -> . _feature ;
    (10) _feature_list -> . _feature ; _feature_list
    (11) _feature -> . error : TYPEID
    (12) _feature -> . OBJECTID : error
    (13) _feature -> . OBJECTID : TYPEID
    (14) _feature -> . OBJECTID : TYPEID ASSIGN _expr
    (15) _feature -> . error ( _formal_list ) : TYPEID { _expr }
    (16) _feature -> . OBJECTID ( error ) : TYPEID { _expr }
    (17) _feature -> . OBJECTID ( _formal_list ) : TYPEID { _expr }
  ! reduce/reduce conflict for } resolved using rule 9 (_feature_list -> _feature ; .)
    }               reduce using rule 9 (_feature_list -> _feature ; .)
    error           shift and go to state 30
    OBJECTID        shift and go to state 13

    _feature                       shift and go to state 12
    _feature_list                  shift and go to state 29

state 21

    (12) _feature -> OBJECTID : . error
    (13) _feature -> OBJECTID : . TYPEID
    (14) _feature -> OBJECTID : . TYPEID ASSIGN _expr
    error           shift and go to state 31
    TYPEID          shift and go to state 32


state 22

    (16) _feature -> OBJECTID ( . error ) : TYPEID { _expr }
    (17) _feature -> OBJECTID ( . _formal_list ) : TYPEID { _expr }
    (18) _formal_list -> .
    (19) _formal_list -> . _formal
    (20) _formal_list -> . _formal , _formal_list
    (21) _formal -> . OBJECTID : TYPEID
    error           shift and go to state 33
    )               reduce using rule 18 (_formal_list -> .)
    OBJECTID        shift and go to state 28

    _formal_list                   shift and go to state 34
    _formal                        shift and go to state 27

state 23

    (3) _class -> CLASS TYPEID INHERITS TYPEID { error . }
    (7) _feature_list -> error . ;
    (11) _feature -> error . : TYPEID
    (15) _feature -> error . ( _formal_list ) : TYPEID { _expr }
    }               shift and go to state 35
    ;               shift and go to state 16
    :               shift and go to state 17
    (               shift and go to state 18


state 24

    (4) _class -> CLASS TYPEID INHERITS TYPEID { _feature_list . }
    }               shift and go to state 36


state 25

    (11) _feature -> error : TYPEID .
    ;               reduce using rule 11 (_feature -> error : TYPEID .)


state 26

    (15) _feature -> error ( _formal_list . ) : TYPEID { _expr }
    )               shift and go to state 37


state 27

    (19) _formal_list -> _formal .
    (20) _formal_list -> _formal . , _formal_list
    )               reduce using rule 19 (_formal_list -> _formal .)
    ,               shift and go to state 38


state 28

    (21) _formal -> OBJECTID . : TYPEID
    :               shift and go to state 39


state 29

    (10) _feature_list -> _feature ; _feature_list .
    }               reduce using rule 10 (_feature_list -> _feature ; _feature_list .)


state 30

    (7) _feature_list -> error . ;
    (11) _feature -> error . : TYPEID
    (15) _feature -> error . ( _formal_list ) : TYPEID { _expr }
    ;               shift and go to state 16
    :               shift and go to state 17
    (               shift and go to state 18


state 31

    (12) _feature -> OBJECTID : error .
    ;               reduce using rule 12 (_feature -> OBJECTID : error .)


state 32

    (13) _feature -> OBJECTID : TYPEID .
    (14) _feature -> OBJECTID : TYPEID . ASSIGN _expr
    ;               reduce using rule 13 (_feature -> OBJECTID : TYPEID .)
    ASSIGN          shift and go to state 40


state 33

    (16) _feature -> OBJECTID ( error . ) : TYPEID { _expr }
    )               shift and go to state 41


state 34

    (17) _feature -> OBJECTID ( _formal_list . ) : TYPEID { _expr }
    )               shift and go to state 42


state 35

    (3) _class -> CLASS TYPEID INHERITS TYPEID { error } .
    ;               reduce using rule 3 (_class -> CLASS TYPEID INHERITS TYPEID { error } .)


state 36

    (4) _class -> CLASS TYPEID INHERITS TYPEID { _feature_list } .
    ;               reduce using rule 4 (_class -> CLASS TYPEID INHERITS TYPEID { _feature_list } .)


state 37

    (15) _feature -> error ( _formal_list ) . : TYPEID { _expr }
    :               shift and go to state 43


state 38

    (20) _formal_list -> _formal , . _formal_list
    (18) _formal_list -> .
    (19) _formal_list -> . _formal
    (20) _formal_list -> . _formal , _formal_list
    (21) _formal -> . OBJECTID : TYPEID
    )               reduce using rule 18 (_formal_list -> .)
    OBJECTID        shift and go to state 28

    _formal                        shift and go to state 27
    _formal_list                   shift and go to state 44

state 39

    (21) _formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 45


state 40

    (14) _feature -> OBJECTID : TYPEID ASSIGN . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 47

state 41

    (16) _feature -> OBJECTID ( error ) . : TYPEID { _expr }
    :               shift and go to state 61


state 42

    (17) _feature -> OBJECTID ( _formal_list ) . : TYPEID { _expr }
    :               shift and go to state 62


state 43

    (15) _feature -> error ( _formal_list ) : . TYPEID { _expr }
    TYPEID          shift and go to state 63


state 44

    (20) _formal_list -> _formal , _formal_list .
    )               reduce using rule 20 (_formal_list -> _formal , _formal_list .)


state 45

    (21) _formal -> OBJECTID : TYPEID .
    ,               reduce using rule 21 (_formal -> OBJECTID : TYPEID .)
    )               reduce using rule 21 (_formal -> OBJECTID : TYPEID .)


state 46

    (33) _expr -> OBJECTID .
    (44) _expr -> OBJECTID . ( )
    (46) _expr -> OBJECTID . ( error )
    (47) _expr -> OBJECTID . ( _expr_list )
    (51) _expr -> OBJECTID . ASSIGN _expr
    =               reduce using rule 33 (_expr -> OBJECTID .)
    LE              reduce using rule 33 (_expr -> OBJECTID .)
    <               reduce using rule 33 (_expr -> OBJECTID .)
    /               reduce using rule 33 (_expr -> OBJECTID .)
    *               reduce using rule 33 (_expr -> OBJECTID .)
    -               reduce using rule 33 (_expr -> OBJECTID .)
    +               reduce using rule 33 (_expr -> OBJECTID .)
    .               reduce using rule 33 (_expr -> OBJECTID .)
    @               reduce using rule 33 (_expr -> OBJECTID .)
    ;               reduce using rule 33 (_expr -> OBJECTID .)
    )               reduce using rule 33 (_expr -> OBJECTID .)
    LOOP            reduce using rule 33 (_expr -> OBJECTID .)
    THEN            reduce using rule 33 (_expr -> OBJECTID .)
    OF              reduce using rule 33 (_expr -> OBJECTID .)
    ,               reduce using rule 33 (_expr -> OBJECTID .)
    }               reduce using rule 33 (_expr -> OBJECTID .)
    POOL            reduce using rule 33 (_expr -> OBJECTID .)
    ELSE            reduce using rule 33 (_expr -> OBJECTID .)
    IN              reduce using rule 33 (_expr -> OBJECTID .)
    FI              reduce using rule 33 (_expr -> OBJECTID .)
    (               shift and go to state 64
    ASSIGN          shift and go to state 65


state 47

    (14) _feature -> OBJECTID : TYPEID ASSIGN _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    ;               reduce using rule 14 (_feature -> OBJECTID : TYPEID ASSIGN _expr .)
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 48

    (22) _expr -> ( . _expr )
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 75

state 49

    (30) _expr -> BOOL_CONST .
    =               reduce using rule 30 (_expr -> BOOL_CONST .)
    LE              reduce using rule 30 (_expr -> BOOL_CONST .)
    <               reduce using rule 30 (_expr -> BOOL_CONST .)
    /               reduce using rule 30 (_expr -> BOOL_CONST .)
    *               reduce using rule 30 (_expr -> BOOL_CONST .)
    -               reduce using rule 30 (_expr -> BOOL_CONST .)
    +               reduce using rule 30 (_expr -> BOOL_CONST .)
    .               reduce using rule 30 (_expr -> BOOL_CONST .)
    @               reduce using rule 30 (_expr -> BOOL_CONST .)
    ;               reduce using rule 30 (_expr -> BOOL_CONST .)
    )               reduce using rule 30 (_expr -> BOOL_CONST .)
    LOOP            reduce using rule 30 (_expr -> BOOL_CONST .)
    THEN            reduce using rule 30 (_expr -> BOOL_CONST .)
    OF              reduce using rule 30 (_expr -> BOOL_CONST .)
    ,               reduce using rule 30 (_expr -> BOOL_CONST .)
    }               reduce using rule 30 (_expr -> BOOL_CONST .)
    POOL            reduce using rule 30 (_expr -> BOOL_CONST .)
    ELSE            reduce using rule 30 (_expr -> BOOL_CONST .)
    IN              reduce using rule 30 (_expr -> BOOL_CONST .)
    FI              reduce using rule 30 (_expr -> BOOL_CONST .)


state 50

    (31) _expr -> STR_CONST .
    =               reduce using rule 31 (_expr -> STR_CONST .)
    LE              reduce using rule 31 (_expr -> STR_CONST .)
    <               reduce using rule 31 (_expr -> STR_CONST .)
    /               reduce using rule 31 (_expr -> STR_CONST .)
    *               reduce using rule 31 (_expr -> STR_CONST .)
    -               reduce using rule 31 (_expr -> STR_CONST .)
    +               reduce using rule 31 (_expr -> STR_CONST .)
    .               reduce using rule 31 (_expr -> STR_CONST .)
    @               reduce using rule 31 (_expr -> STR_CONST .)
    ;               reduce using rule 31 (_expr -> STR_CONST .)
    )               reduce using rule 31 (_expr -> STR_CONST .)
    LOOP            reduce using rule 31 (_expr -> STR_CONST .)
    THEN            reduce using rule 31 (_expr -> STR_CONST .)
    OF              reduce using rule 31 (_expr -> STR_CONST .)
    ,               reduce using rule 31 (_expr -> STR_CONST .)
    }               reduce using rule 31 (_expr -> STR_CONST .)
    POOL            reduce using rule 31 (_expr -> STR_CONST .)
    ELSE            reduce using rule 31 (_expr -> STR_CONST .)
    IN              reduce using rule 31 (_expr -> STR_CONST .)
    FI              reduce using rule 31 (_expr -> STR_CONST .)


state 51

    (32) _expr -> INT_CONST .
    =               reduce using rule 32 (_expr -> INT_CONST .)
    LE              reduce using rule 32 (_expr -> INT_CONST .)
    <               reduce using rule 32 (_expr -> INT_CONST .)
    /               reduce using rule 32 (_expr -> INT_CONST .)
    *               reduce using rule 32 (_expr -> INT_CONST .)
    -               reduce using rule 32 (_expr -> INT_CONST .)
    +               reduce using rule 32 (_expr -> INT_CONST .)
    .               reduce using rule 32 (_expr -> INT_CONST .)
    @               reduce using rule 32 (_expr -> INT_CONST .)
    ;               reduce using rule 32 (_expr -> INT_CONST .)
    )               reduce using rule 32 (_expr -> INT_CONST .)
    LOOP            reduce using rule 32 (_expr -> INT_CONST .)
    THEN            reduce using rule 32 (_expr -> INT_CONST .)
    OF              reduce using rule 32 (_expr -> INT_CONST .)
    ,               reduce using rule 32 (_expr -> INT_CONST .)
    }               reduce using rule 32 (_expr -> INT_CONST .)
    POOL            reduce using rule 32 (_expr -> INT_CONST .)
    ELSE            reduce using rule 32 (_expr -> INT_CONST .)
    IN              reduce using rule 32 (_expr -> INT_CONST .)
    FI              reduce using rule 32 (_expr -> INT_CONST .)


state 52

    (34) _expr -> ISVOID . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 76

state 53

    (35) _expr -> NOT . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 77

state 54

    (36) _expr -> ~ . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 78

state 55

    (37) _expr -> LET . OBJECTID : TYPEID , _listalet
    (38) _expr -> LET . OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> LET . OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> LET . OBJECTID : TYPEID IN _expr
    (41) _expr -> LET . OBJECTID : TYPEID ASSIGN _expr IN _expr
    OBJECTID        shift and go to state 79


state 56

    (42) _expr -> WHILE . _expr LOOP _expr POOL
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 80

state 57

    (43) _expr -> IF . _expr THEN _expr ELSE _expr FI
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 81

state 58

    (52) _expr -> CASE . _expr OF _lista_case ESAC
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 82

state 59

    (53) _expr -> NEW . TYPEID
    TYPEID          shift and go to state 83


state 60

    (54) _expr -> { . expresion_block }
    (55) expresion_block -> . expresion_block _expr ;
    (56) expresion_block -> . error ;
    (57) expresion_block -> . _expr ;
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    error           shift and go to state 86
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    expresion_block                shift and go to state 84
    _expr                          shift and go to state 85

state 61

    (16) _feature -> OBJECTID ( error ) : . TYPEID { _expr }
    TYPEID          shift and go to state 87


state 62

    (17) _feature -> OBJECTID ( _formal_list ) : . TYPEID { _expr }
    TYPEID          shift and go to state 88


state 63

    (15) _feature -> error ( _formal_list ) : TYPEID . { _expr }
    {               shift and go to state 89


state 64

    (44) _expr -> OBJECTID ( . )
    (46) _expr -> OBJECTID ( . error )
    (47) _expr -> OBJECTID ( . _expr_list )
    (58) _expr_list -> . _expr
    (59) _expr_list -> . _expr , error
    (60) _expr_list -> . error , _expr_list
    (61) _expr_list -> . _expr , _expr_list
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    )               shift and go to state 90
    error           shift and go to state 91
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr_list                     shift and go to state 92
    _expr                          shift and go to state 93

state 65

    (51) _expr -> OBJECTID ASSIGN . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 94

state 66

    (23) _expr -> _expr = . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 95

state 67

    (24) _expr -> _expr LE . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 96

state 68

    (25) _expr -> _expr < . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 97

state 69

    (26) _expr -> _expr / . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 98

state 70

    (27) _expr -> _expr * . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 99

state 71

    (28) _expr -> _expr - . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 100

state 72

    (29) _expr -> _expr + . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 101

state 73

    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    OBJECTID        shift and go to state 102


state 74

    (49) _expr -> _expr @ . TYPEID . OBJECTID ( )
    (50) _expr -> _expr @ . TYPEID . OBJECTID ( _expr_list )
    TYPEID          shift and go to state 103


state 75

    (22) _expr -> ( _expr . )
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    )               shift and go to state 104
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 76

    (34) _expr -> ISVOID _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    =               reduce using rule 34 (_expr -> ISVOID _expr .)
    LE              reduce using rule 34 (_expr -> ISVOID _expr .)
    <               reduce using rule 34 (_expr -> ISVOID _expr .)
    /               reduce using rule 34 (_expr -> ISVOID _expr .)
    *               reduce using rule 34 (_expr -> ISVOID _expr .)
    -               reduce using rule 34 (_expr -> ISVOID _expr .)
    +               reduce using rule 34 (_expr -> ISVOID _expr .)
    ;               reduce using rule 34 (_expr -> ISVOID _expr .)
    )               reduce using rule 34 (_expr -> ISVOID _expr .)
    LOOP            reduce using rule 34 (_expr -> ISVOID _expr .)
    THEN            reduce using rule 34 (_expr -> ISVOID _expr .)
    OF              reduce using rule 34 (_expr -> ISVOID _expr .)
    ,               reduce using rule 34 (_expr -> ISVOID _expr .)
    }               reduce using rule 34 (_expr -> ISVOID _expr .)
    POOL            reduce using rule 34 (_expr -> ISVOID _expr .)
    ELSE            reduce using rule 34 (_expr -> ISVOID _expr .)
    IN              reduce using rule 34 (_expr -> ISVOID _expr .)
    FI              reduce using rule 34 (_expr -> ISVOID _expr .)
    .               shift and go to state 73
    @               shift and go to state 74


state 77

    (35) _expr -> NOT _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    ;               reduce using rule 35 (_expr -> NOT _expr .)
    )               reduce using rule 35 (_expr -> NOT _expr .)
    LOOP            reduce using rule 35 (_expr -> NOT _expr .)
    THEN            reduce using rule 35 (_expr -> NOT _expr .)
    OF              reduce using rule 35 (_expr -> NOT _expr .)
    ,               reduce using rule 35 (_expr -> NOT _expr .)
    }               reduce using rule 35 (_expr -> NOT _expr .)
    POOL            reduce using rule 35 (_expr -> NOT _expr .)
    ELSE            reduce using rule 35 (_expr -> NOT _expr .)
    IN              reduce using rule 35 (_expr -> NOT _expr .)
    FI              reduce using rule 35 (_expr -> NOT _expr .)
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 78

    (36) _expr -> ~ _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    =               reduce using rule 36 (_expr -> ~ _expr .)
    LE              reduce using rule 36 (_expr -> ~ _expr .)
    <               reduce using rule 36 (_expr -> ~ _expr .)
    /               reduce using rule 36 (_expr -> ~ _expr .)
    *               reduce using rule 36 (_expr -> ~ _expr .)
    -               reduce using rule 36 (_expr -> ~ _expr .)
    +               reduce using rule 36 (_expr -> ~ _expr .)
    ;               reduce using rule 36 (_expr -> ~ _expr .)
    )               reduce using rule 36 (_expr -> ~ _expr .)
    LOOP            reduce using rule 36 (_expr -> ~ _expr .)
    THEN            reduce using rule 36 (_expr -> ~ _expr .)
    OF              reduce using rule 36 (_expr -> ~ _expr .)
    ,               reduce using rule 36 (_expr -> ~ _expr .)
    }               reduce using rule 36 (_expr -> ~ _expr .)
    POOL            reduce using rule 36 (_expr -> ~ _expr .)
    ELSE            reduce using rule 36 (_expr -> ~ _expr .)
    IN              reduce using rule 36 (_expr -> ~ _expr .)
    FI              reduce using rule 36 (_expr -> ~ _expr .)
    .               shift and go to state 73
    @               shift and go to state 74


state 79

    (37) _expr -> LET OBJECTID . : TYPEID , _listalet
    (38) _expr -> LET OBJECTID . : TYPEID ASSIGN error , _listalet
    (39) _expr -> LET OBJECTID . : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> LET OBJECTID . : TYPEID IN _expr
    (41) _expr -> LET OBJECTID . : TYPEID ASSIGN _expr IN _expr
    :               shift and go to state 105


state 80

    (42) _expr -> WHILE _expr . LOOP _expr POOL
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    LOOP            shift and go to state 106
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 81

    (43) _expr -> IF _expr . THEN _expr ELSE _expr FI
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    THEN            shift and go to state 107
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 82

    (52) _expr -> CASE _expr . OF _lista_case ESAC
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    OF              shift and go to state 108
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 83

    (53) _expr -> NEW TYPEID .
    =               reduce using rule 53 (_expr -> NEW TYPEID .)
    LE              reduce using rule 53 (_expr -> NEW TYPEID .)
    <               reduce using rule 53 (_expr -> NEW TYPEID .)
    /               reduce using rule 53 (_expr -> NEW TYPEID .)
    *               reduce using rule 53 (_expr -> NEW TYPEID .)
    -               reduce using rule 53 (_expr -> NEW TYPEID .)
    +               reduce using rule 53 (_expr -> NEW TYPEID .)
    .               reduce using rule 53 (_expr -> NEW TYPEID .)
    @               reduce using rule 53 (_expr -> NEW TYPEID .)
    ;               reduce using rule 53 (_expr -> NEW TYPEID .)
    )               reduce using rule 53 (_expr -> NEW TYPEID .)
    LOOP            reduce using rule 53 (_expr -> NEW TYPEID .)
    THEN            reduce using rule 53 (_expr -> NEW TYPEID .)
    OF              reduce using rule 53 (_expr -> NEW TYPEID .)
    ,               reduce using rule 53 (_expr -> NEW TYPEID .)
    }               reduce using rule 53 (_expr -> NEW TYPEID .)
    POOL            reduce using rule 53 (_expr -> NEW TYPEID .)
    ELSE            reduce using rule 53 (_expr -> NEW TYPEID .)
    IN              reduce using rule 53 (_expr -> NEW TYPEID .)
    FI              reduce using rule 53 (_expr -> NEW TYPEID .)


state 84

    (54) _expr -> { expresion_block . }
    (55) expresion_block -> expresion_block . _expr ;
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    }               shift and go to state 109
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 110

state 85

    (57) expresion_block -> _expr . ;
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    ;               shift and go to state 111
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 86

    (56) expresion_block -> error . ;
    ;               shift and go to state 112


state 87

    (16) _feature -> OBJECTID ( error ) : TYPEID . { _expr }
    {               shift and go to state 113


state 88

    (17) _feature -> OBJECTID ( _formal_list ) : TYPEID . { _expr }
    {               shift and go to state 114


state 89

    (15) _feature -> error ( _formal_list ) : TYPEID { . _expr }
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 115

state 90

    (44) _expr -> OBJECTID ( ) .
    =               reduce using rule 44 (_expr -> OBJECTID ( ) .)
    LE              reduce using rule 44 (_expr -> OBJECTID ( ) .)
    <               reduce using rule 44 (_expr -> OBJECTID ( ) .)
    /               reduce using rule 44 (_expr -> OBJECTID ( ) .)
    *               reduce using rule 44 (_expr -> OBJECTID ( ) .)
    -               reduce using rule 44 (_expr -> OBJECTID ( ) .)
    +               reduce using rule 44 (_expr -> OBJECTID ( ) .)
    .               reduce using rule 44 (_expr -> OBJECTID ( ) .)
    @               reduce using rule 44 (_expr -> OBJECTID ( ) .)
    ;               reduce using rule 44 (_expr -> OBJECTID ( ) .)
    )               reduce using rule 44 (_expr -> OBJECTID ( ) .)
    LOOP            reduce using rule 44 (_expr -> OBJECTID ( ) .)
    THEN            reduce using rule 44 (_expr -> OBJECTID ( ) .)
    OF              reduce using rule 44 (_expr -> OBJECTID ( ) .)
    ,               reduce using rule 44 (_expr -> OBJECTID ( ) .)
    }               reduce using rule 44 (_expr -> OBJECTID ( ) .)
    POOL            reduce using rule 44 (_expr -> OBJECTID ( ) .)
    ELSE            reduce using rule 44 (_expr -> OBJECTID ( ) .)
    IN              reduce using rule 44 (_expr -> OBJECTID ( ) .)
    FI              reduce using rule 44 (_expr -> OBJECTID ( ) .)


state 91

    (46) _expr -> OBJECTID ( error . )
    (60) _expr_list -> error . , _expr_list
    )               shift and go to state 116
    ,               shift and go to state 117


state 92

    (47) _expr -> OBJECTID ( _expr_list . )
    )               shift and go to state 118


state 93

    (58) _expr_list -> _expr .
    (59) _expr_list -> _expr . , error
    (61) _expr_list -> _expr . , _expr_list
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    )               reduce using rule 58 (_expr_list -> _expr .)
    ,               shift and go to state 119
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 94

    (51) _expr -> OBJECTID ASSIGN _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    ;               reduce using rule 51 (_expr -> OBJECTID ASSIGN _expr .)
    )               reduce using rule 51 (_expr -> OBJECTID ASSIGN _expr .)
    LOOP            reduce using rule 51 (_expr -> OBJECTID ASSIGN _expr .)
    THEN            reduce using rule 51 (_expr -> OBJECTID ASSIGN _expr .)
    OF              reduce using rule 51 (_expr -> OBJECTID ASSIGN _expr .)
    ,               reduce using rule 51 (_expr -> OBJECTID ASSIGN _expr .)
    }               reduce using rule 51 (_expr -> OBJECTID ASSIGN _expr .)
    POOL            reduce using rule 51 (_expr -> OBJECTID ASSIGN _expr .)
    ELSE            reduce using rule 51 (_expr -> OBJECTID ASSIGN _expr .)
    IN              reduce using rule 51 (_expr -> OBJECTID ASSIGN _expr .)
    FI              reduce using rule 51 (_expr -> OBJECTID ASSIGN _expr .)
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 95

    (23) _expr -> _expr = _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    =               reduce using rule 23 (_expr -> _expr = _expr .)
    LE              reduce using rule 23 (_expr -> _expr = _expr .)
    <               reduce using rule 23 (_expr -> _expr = _expr .)
    ;               reduce using rule 23 (_expr -> _expr = _expr .)
    )               reduce using rule 23 (_expr -> _expr = _expr .)
    LOOP            reduce using rule 23 (_expr -> _expr = _expr .)
    THEN            reduce using rule 23 (_expr -> _expr = _expr .)
    OF              reduce using rule 23 (_expr -> _expr = _expr .)
    ,               reduce using rule 23 (_expr -> _expr = _expr .)
    }               reduce using rule 23 (_expr -> _expr = _expr .)
    POOL            reduce using rule 23 (_expr -> _expr = _expr .)
    ELSE            reduce using rule 23 (_expr -> _expr = _expr .)
    IN              reduce using rule 23 (_expr -> _expr = _expr .)
    FI              reduce using rule 23 (_expr -> _expr = _expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 96

    (24) _expr -> _expr LE _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    =               reduce using rule 24 (_expr -> _expr LE _expr .)
    LE              reduce using rule 24 (_expr -> _expr LE _expr .)
    <               reduce using rule 24 (_expr -> _expr LE _expr .)
    ;               reduce using rule 24 (_expr -> _expr LE _expr .)
    )               reduce using rule 24 (_expr -> _expr LE _expr .)
    LOOP            reduce using rule 24 (_expr -> _expr LE _expr .)
    THEN            reduce using rule 24 (_expr -> _expr LE _expr .)
    OF              reduce using rule 24 (_expr -> _expr LE _expr .)
    ,               reduce using rule 24 (_expr -> _expr LE _expr .)
    }               reduce using rule 24 (_expr -> _expr LE _expr .)
    POOL            reduce using rule 24 (_expr -> _expr LE _expr .)
    ELSE            reduce using rule 24 (_expr -> _expr LE _expr .)
    IN              reduce using rule 24 (_expr -> _expr LE _expr .)
    FI              reduce using rule 24 (_expr -> _expr LE _expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 97

    (25) _expr -> _expr < _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    =               reduce using rule 25 (_expr -> _expr < _expr .)
    LE              reduce using rule 25 (_expr -> _expr < _expr .)
    <               reduce using rule 25 (_expr -> _expr < _expr .)
    ;               reduce using rule 25 (_expr -> _expr < _expr .)
    )               reduce using rule 25 (_expr -> _expr < _expr .)
    LOOP            reduce using rule 25 (_expr -> _expr < _expr .)
    THEN            reduce using rule 25 (_expr -> _expr < _expr .)
    OF              reduce using rule 25 (_expr -> _expr < _expr .)
    ,               reduce using rule 25 (_expr -> _expr < _expr .)
    }               reduce using rule 25 (_expr -> _expr < _expr .)
    POOL            reduce using rule 25 (_expr -> _expr < _expr .)
    ELSE            reduce using rule 25 (_expr -> _expr < _expr .)
    IN              reduce using rule 25 (_expr -> _expr < _expr .)
    FI              reduce using rule 25 (_expr -> _expr < _expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 98

    (26) _expr -> _expr / _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    =               reduce using rule 26 (_expr -> _expr / _expr .)
    LE              reduce using rule 26 (_expr -> _expr / _expr .)
    <               reduce using rule 26 (_expr -> _expr / _expr .)
    /               reduce using rule 26 (_expr -> _expr / _expr .)
    *               reduce using rule 26 (_expr -> _expr / _expr .)
    -               reduce using rule 26 (_expr -> _expr / _expr .)
    +               reduce using rule 26 (_expr -> _expr / _expr .)
    ;               reduce using rule 26 (_expr -> _expr / _expr .)
    )               reduce using rule 26 (_expr -> _expr / _expr .)
    LOOP            reduce using rule 26 (_expr -> _expr / _expr .)
    THEN            reduce using rule 26 (_expr -> _expr / _expr .)
    OF              reduce using rule 26 (_expr -> _expr / _expr .)
    ,               reduce using rule 26 (_expr -> _expr / _expr .)
    }               reduce using rule 26 (_expr -> _expr / _expr .)
    POOL            reduce using rule 26 (_expr -> _expr / _expr .)
    ELSE            reduce using rule 26 (_expr -> _expr / _expr .)
    IN              reduce using rule 26 (_expr -> _expr / _expr .)
    FI              reduce using rule 26 (_expr -> _expr / _expr .)
    .               shift and go to state 73
    @               shift and go to state 74


state 99

    (27) _expr -> _expr * _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    =               reduce using rule 27 (_expr -> _expr * _expr .)
    LE              reduce using rule 27 (_expr -> _expr * _expr .)
    <               reduce using rule 27 (_expr -> _expr * _expr .)
    /               reduce using rule 27 (_expr -> _expr * _expr .)
    *               reduce using rule 27 (_expr -> _expr * _expr .)
    -               reduce using rule 27 (_expr -> _expr * _expr .)
    +               reduce using rule 27 (_expr -> _expr * _expr .)
    ;               reduce using rule 27 (_expr -> _expr * _expr .)
    )               reduce using rule 27 (_expr -> _expr * _expr .)
    LOOP            reduce using rule 27 (_expr -> _expr * _expr .)
    THEN            reduce using rule 27 (_expr -> _expr * _expr .)
    OF              reduce using rule 27 (_expr -> _expr * _expr .)
    ,               reduce using rule 27 (_expr -> _expr * _expr .)
    }               reduce using rule 27 (_expr -> _expr * _expr .)
    POOL            reduce using rule 27 (_expr -> _expr * _expr .)
    ELSE            reduce using rule 27 (_expr -> _expr * _expr .)
    IN              reduce using rule 27 (_expr -> _expr * _expr .)
    FI              reduce using rule 27 (_expr -> _expr * _expr .)
    .               shift and go to state 73
    @               shift and go to state 74


state 100

    (28) _expr -> _expr - _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    =               reduce using rule 28 (_expr -> _expr - _expr .)
    LE              reduce using rule 28 (_expr -> _expr - _expr .)
    <               reduce using rule 28 (_expr -> _expr - _expr .)
    -               reduce using rule 28 (_expr -> _expr - _expr .)
    +               reduce using rule 28 (_expr -> _expr - _expr .)
    ;               reduce using rule 28 (_expr -> _expr - _expr .)
    )               reduce using rule 28 (_expr -> _expr - _expr .)
    LOOP            reduce using rule 28 (_expr -> _expr - _expr .)
    THEN            reduce using rule 28 (_expr -> _expr - _expr .)
    OF              reduce using rule 28 (_expr -> _expr - _expr .)
    ,               reduce using rule 28 (_expr -> _expr - _expr .)
    }               reduce using rule 28 (_expr -> _expr - _expr .)
    POOL            reduce using rule 28 (_expr -> _expr - _expr .)
    ELSE            reduce using rule 28 (_expr -> _expr - _expr .)
    IN              reduce using rule 28 (_expr -> _expr - _expr .)
    FI              reduce using rule 28 (_expr -> _expr - _expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    .               shift and go to state 73
    @               shift and go to state 74


state 101

    (29) _expr -> _expr + _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    =               reduce using rule 29 (_expr -> _expr + _expr .)
    LE              reduce using rule 29 (_expr -> _expr + _expr .)
    <               reduce using rule 29 (_expr -> _expr + _expr .)
    -               reduce using rule 29 (_expr -> _expr + _expr .)
    +               reduce using rule 29 (_expr -> _expr + _expr .)
    ;               reduce using rule 29 (_expr -> _expr + _expr .)
    )               reduce using rule 29 (_expr -> _expr + _expr .)
    LOOP            reduce using rule 29 (_expr -> _expr + _expr .)
    THEN            reduce using rule 29 (_expr -> _expr + _expr .)
    OF              reduce using rule 29 (_expr -> _expr + _expr .)
    ,               reduce using rule 29 (_expr -> _expr + _expr .)
    }               reduce using rule 29 (_expr -> _expr + _expr .)
    POOL            reduce using rule 29 (_expr -> _expr + _expr .)
    ELSE            reduce using rule 29 (_expr -> _expr + _expr .)
    IN              reduce using rule 29 (_expr -> _expr + _expr .)
    FI              reduce using rule 29 (_expr -> _expr + _expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    .               shift and go to state 73
    @               shift and go to state 74


state 102

    (45) _expr -> _expr . OBJECTID . ( )
    (48) _expr -> _expr . OBJECTID . ( _expr_list )
    (               shift and go to state 120


state 103

    (49) _expr -> _expr @ TYPEID . . OBJECTID ( )
    (50) _expr -> _expr @ TYPEID . . OBJECTID ( _expr_list )
    .               shift and go to state 121


state 104

    (22) _expr -> ( _expr ) .
    =               reduce using rule 22 (_expr -> ( _expr ) .)
    LE              reduce using rule 22 (_expr -> ( _expr ) .)
    <               reduce using rule 22 (_expr -> ( _expr ) .)
    /               reduce using rule 22 (_expr -> ( _expr ) .)
    *               reduce using rule 22 (_expr -> ( _expr ) .)
    -               reduce using rule 22 (_expr -> ( _expr ) .)
    +               reduce using rule 22 (_expr -> ( _expr ) .)
    .               reduce using rule 22 (_expr -> ( _expr ) .)
    @               reduce using rule 22 (_expr -> ( _expr ) .)
    ;               reduce using rule 22 (_expr -> ( _expr ) .)
    )               reduce using rule 22 (_expr -> ( _expr ) .)
    LOOP            reduce using rule 22 (_expr -> ( _expr ) .)
    THEN            reduce using rule 22 (_expr -> ( _expr ) .)
    OF              reduce using rule 22 (_expr -> ( _expr ) .)
    ,               reduce using rule 22 (_expr -> ( _expr ) .)
    }               reduce using rule 22 (_expr -> ( _expr ) .)
    POOL            reduce using rule 22 (_expr -> ( _expr ) .)
    ELSE            reduce using rule 22 (_expr -> ( _expr ) .)
    IN              reduce using rule 22 (_expr -> ( _expr ) .)
    FI              reduce using rule 22 (_expr -> ( _expr ) .)


state 105

    (37) _expr -> LET OBJECTID : . TYPEID , _listalet
    (38) _expr -> LET OBJECTID : . TYPEID ASSIGN error , _listalet
    (39) _expr -> LET OBJECTID : . TYPEID ASSIGN _expr , _listalet
    (40) _expr -> LET OBJECTID : . TYPEID IN _expr
    (41) _expr -> LET OBJECTID : . TYPEID ASSIGN _expr IN _expr
    TYPEID          shift and go to state 122


state 106

    (42) _expr -> WHILE _expr LOOP . _expr POOL
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 123

state 107

    (43) _expr -> IF _expr THEN . _expr ELSE _expr FI
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 124

state 108

    (52) _expr -> CASE _expr OF . _lista_case ESAC
    (63) _lista_case -> .
    (64) _lista_case -> . _rama_case ; _lista_case
    (62) _rama_case -> . OBJECTID : TYPEID DARROW _expr
    ESAC            reduce using rule 63 (_lista_case -> .)
    OBJECTID        shift and go to state 127

    _lista_case                    shift and go to state 125
    _rama_case                     shift and go to state 126

state 109

    (54) _expr -> { expresion_block } .
    =               reduce using rule 54 (_expr -> { expresion_block } .)
    LE              reduce using rule 54 (_expr -> { expresion_block } .)
    <               reduce using rule 54 (_expr -> { expresion_block } .)
    /               reduce using rule 54 (_expr -> { expresion_block } .)
    *               reduce using rule 54 (_expr -> { expresion_block } .)
    -               reduce using rule 54 (_expr -> { expresion_block } .)
    +               reduce using rule 54 (_expr -> { expresion_block } .)
    .               reduce using rule 54 (_expr -> { expresion_block } .)
    @               reduce using rule 54 (_expr -> { expresion_block } .)
    ;               reduce using rule 54 (_expr -> { expresion_block } .)
    )               reduce using rule 54 (_expr -> { expresion_block } .)
    LOOP            reduce using rule 54 (_expr -> { expresion_block } .)
    THEN            reduce using rule 54 (_expr -> { expresion_block } .)
    OF              reduce using rule 54 (_expr -> { expresion_block } .)
    ,               reduce using rule 54 (_expr -> { expresion_block } .)
    }               reduce using rule 54 (_expr -> { expresion_block } .)
    POOL            reduce using rule 54 (_expr -> { expresion_block } .)
    ELSE            reduce using rule 54 (_expr -> { expresion_block } .)
    IN              reduce using rule 54 (_expr -> { expresion_block } .)
    FI              reduce using rule 54 (_expr -> { expresion_block } .)


state 110

    (55) expresion_block -> expresion_block _expr . ;
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    ;               shift and go to state 128
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 111

    (57) expresion_block -> _expr ; .
    }               reduce using rule 57 (expresion_block -> _expr ; .)
    (               reduce using rule 57 (expresion_block -> _expr ; .)
    BOOL_CONST      reduce using rule 57 (expresion_block -> _expr ; .)
    STR_CONST       reduce using rule 57 (expresion_block -> _expr ; .)
    INT_CONST       reduce using rule 57 (expresion_block -> _expr ; .)
    OBJECTID        reduce using rule 57 (expresion_block -> _expr ; .)
    ISVOID          reduce using rule 57 (expresion_block -> _expr ; .)
    NOT             reduce using rule 57 (expresion_block -> _expr ; .)
    ~               reduce using rule 57 (expresion_block -> _expr ; .)
    LET             reduce using rule 57 (expresion_block -> _expr ; .)
    WHILE           reduce using rule 57 (expresion_block -> _expr ; .)
    IF              reduce using rule 57 (expresion_block -> _expr ; .)
    CASE            reduce using rule 57 (expresion_block -> _expr ; .)
    NEW             reduce using rule 57 (expresion_block -> _expr ; .)
    {               reduce using rule 57 (expresion_block -> _expr ; .)


state 112

    (56) expresion_block -> error ; .
    }               reduce using rule 56 (expresion_block -> error ; .)
    (               reduce using rule 56 (expresion_block -> error ; .)
    BOOL_CONST      reduce using rule 56 (expresion_block -> error ; .)
    STR_CONST       reduce using rule 56 (expresion_block -> error ; .)
    INT_CONST       reduce using rule 56 (expresion_block -> error ; .)
    OBJECTID        reduce using rule 56 (expresion_block -> error ; .)
    ISVOID          reduce using rule 56 (expresion_block -> error ; .)
    NOT             reduce using rule 56 (expresion_block -> error ; .)
    ~               reduce using rule 56 (expresion_block -> error ; .)
    LET             reduce using rule 56 (expresion_block -> error ; .)
    WHILE           reduce using rule 56 (expresion_block -> error ; .)
    IF              reduce using rule 56 (expresion_block -> error ; .)
    CASE            reduce using rule 56 (expresion_block -> error ; .)
    NEW             reduce using rule 56 (expresion_block -> error ; .)
    {               reduce using rule 56 (expresion_block -> error ; .)


state 113

    (16) _feature -> OBJECTID ( error ) : TYPEID { . _expr }
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 129

state 114

    (17) _feature -> OBJECTID ( _formal_list ) : TYPEID { . _expr }
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 130

state 115

    (15) _feature -> error ( _formal_list ) : TYPEID { _expr . }
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    }               shift and go to state 131
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 116

    (46) _expr -> OBJECTID ( error ) .
    =               reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    LE              reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    <               reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    /               reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    *               reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    -               reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    +               reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    .               reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    @               reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    ;               reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    )               reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    LOOP            reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    THEN            reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    OF              reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    ,               reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    }               reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    POOL            reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    ELSE            reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    IN              reduce using rule 46 (_expr -> OBJECTID ( error ) .)
    FI              reduce using rule 46 (_expr -> OBJECTID ( error ) .)


state 117

    (60) _expr_list -> error , . _expr_list
    (58) _expr_list -> . _expr
    (59) _expr_list -> . _expr , error
    (60) _expr_list -> . error , _expr_list
    (61) _expr_list -> . _expr , _expr_list
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    error           shift and go to state 132
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr_list                     shift and go to state 133
    _expr                          shift and go to state 93

state 118

    (47) _expr -> OBJECTID ( _expr_list ) .
    =               reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    LE              reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    <               reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    /               reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    *               reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    -               reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    +               reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    .               reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    @               reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    ;               reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    )               reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    LOOP            reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    THEN            reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    OF              reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    ,               reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    }               reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    POOL            reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    ELSE            reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    IN              reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)
    FI              reduce using rule 47 (_expr -> OBJECTID ( _expr_list ) .)


state 119

    (59) _expr_list -> _expr , . error
    (61) _expr_list -> _expr , . _expr_list
    (58) _expr_list -> . _expr
    (59) _expr_list -> . _expr , error
    (60) _expr_list -> . error , _expr_list
    (61) _expr_list -> . _expr , _expr_list
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    error           shift and go to state 134
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 93
    _expr_list                     shift and go to state 135

state 120

    (45) _expr -> _expr . OBJECTID ( . )
    (48) _expr -> _expr . OBJECTID ( . _expr_list )
    (58) _expr_list -> . _expr
    (59) _expr_list -> . _expr , error
    (60) _expr_list -> . error , _expr_list
    (61) _expr_list -> . _expr , _expr_list
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    )               shift and go to state 136
    error           shift and go to state 132
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 93
    _expr_list                     shift and go to state 137

state 121

    (49) _expr -> _expr @ TYPEID . . OBJECTID ( )
    (50) _expr -> _expr @ TYPEID . . OBJECTID ( _expr_list )
    OBJECTID        shift and go to state 138


state 122

    (37) _expr -> LET OBJECTID : TYPEID . , _listalet
    (38) _expr -> LET OBJECTID : TYPEID . ASSIGN error , _listalet
    (39) _expr -> LET OBJECTID : TYPEID . ASSIGN _expr , _listalet
    (40) _expr -> LET OBJECTID : TYPEID . IN _expr
    (41) _expr -> LET OBJECTID : TYPEID . ASSIGN _expr IN _expr
    ,               shift and go to state 139
    ASSIGN          shift and go to state 140
    IN              shift and go to state 141


state 123

    (42) _expr -> WHILE _expr LOOP _expr . POOL
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    POOL            shift and go to state 142
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 124

    (43) _expr -> IF _expr THEN _expr . ELSE _expr FI
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    ELSE            shift and go to state 143
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 125

    (52) _expr -> CASE _expr OF _lista_case . ESAC
    ESAC            shift and go to state 144


state 126

    (64) _lista_case -> _rama_case . ; _lista_case
    ;               shift and go to state 145


state 127

    (62) _rama_case -> OBJECTID . : TYPEID DARROW _expr
    :               shift and go to state 146


state 128

    (55) expresion_block -> expresion_block _expr ; .
    }               reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    (               reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    BOOL_CONST      reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    STR_CONST       reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    INT_CONST       reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    OBJECTID        reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    ISVOID          reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    NOT             reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    ~               reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    LET             reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    WHILE           reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    IF              reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    CASE            reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    NEW             reduce using rule 55 (expresion_block -> expresion_block _expr ; .)
    {               reduce using rule 55 (expresion_block -> expresion_block _expr ; .)


state 129

    (16) _feature -> OBJECTID ( error ) : TYPEID { _expr . }
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    }               shift and go to state 147
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 130

    (17) _feature -> OBJECTID ( _formal_list ) : TYPEID { _expr . }
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    }               shift and go to state 148
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 131

    (15) _feature -> error ( _formal_list ) : TYPEID { _expr } .
    ;               reduce using rule 15 (_feature -> error ( _formal_list ) : TYPEID { _expr } .)


state 132

    (60) _expr_list -> error . , _expr_list
    ,               shift and go to state 117


state 133

    (60) _expr_list -> error , _expr_list .
    )               reduce using rule 60 (_expr_list -> error , _expr_list .)


state 134

    (59) _expr_list -> _expr , error .
    (60) _expr_list -> error . , _expr_list
    )               reduce using rule 59 (_expr_list -> _expr , error .)
    ,               shift and go to state 117


state 135

    (61) _expr_list -> _expr , _expr_list .
    )               reduce using rule 61 (_expr_list -> _expr , _expr_list .)


state 136

    (45) _expr -> _expr . OBJECTID ( ) .
    =               reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    LE              reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    <               reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    /               reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    *               reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    -               reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    +               reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    .               reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    @               reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    ;               reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    )               reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    LOOP            reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    THEN            reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    OF              reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    ,               reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    }               reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    POOL            reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    ELSE            reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    IN              reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)
    FI              reduce using rule 45 (_expr -> _expr . OBJECTID ( ) .)


state 137

    (48) _expr -> _expr . OBJECTID ( _expr_list . )
    )               shift and go to state 149


state 138

    (49) _expr -> _expr @ TYPEID . OBJECTID . ( )
    (50) _expr -> _expr @ TYPEID . OBJECTID . ( _expr_list )
    (               shift and go to state 150


state 139

    (37) _expr -> LET OBJECTID : TYPEID , . _listalet
    (65) _listalet -> . OBJECTID : TYPEID IN _expr
    (66) _listalet -> . OBJECTID : TYPEID ASSIGN error IN _expr
    (67) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (68) _listalet -> . OBJECTID : TYPEID , _listalet
    (69) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 151

    _listalet                      shift and go to state 152

state 140

    (38) _expr -> LET OBJECTID : TYPEID ASSIGN . error , _listalet
    (39) _expr -> LET OBJECTID : TYPEID ASSIGN . _expr , _listalet
    (41) _expr -> LET OBJECTID : TYPEID ASSIGN . _expr IN _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    error           shift and go to state 153
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 154

state 141

    (40) _expr -> LET OBJECTID : TYPEID IN . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 155

state 142

    (42) _expr -> WHILE _expr LOOP _expr POOL .
    =               reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    LE              reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    <               reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    /               reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    *               reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    -               reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    +               reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    .               reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    @               reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    ;               reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    )               reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    LOOP            reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    THEN            reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    OF              reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    ,               reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    }               reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    POOL            reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    ELSE            reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    IN              reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)
    FI              reduce using rule 42 (_expr -> WHILE _expr LOOP _expr POOL .)


state 143

    (43) _expr -> IF _expr THEN _expr ELSE . _expr FI
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 156

state 144

    (52) _expr -> CASE _expr OF _lista_case ESAC .
    =               reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    LE              reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    <               reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    /               reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    *               reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    -               reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    +               reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    .               reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    @               reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    ;               reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    )               reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    LOOP            reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    THEN            reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    OF              reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    ,               reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    }               reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    POOL            reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    ELSE            reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    IN              reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)
    FI              reduce using rule 52 (_expr -> CASE _expr OF _lista_case ESAC .)


state 145

    (64) _lista_case -> _rama_case ; . _lista_case
    (63) _lista_case -> .
    (64) _lista_case -> . _rama_case ; _lista_case
    (62) _rama_case -> . OBJECTID : TYPEID DARROW _expr
    ESAC            reduce using rule 63 (_lista_case -> .)
    OBJECTID        shift and go to state 127

    _rama_case                     shift and go to state 126
    _lista_case                    shift and go to state 157

state 146

    (62) _rama_case -> OBJECTID : . TYPEID DARROW _expr
    TYPEID          shift and go to state 158


state 147

    (16) _feature -> OBJECTID ( error ) : TYPEID { _expr } .
    ;               reduce using rule 16 (_feature -> OBJECTID ( error ) : TYPEID { _expr } .)


state 148

    (17) _feature -> OBJECTID ( _formal_list ) : TYPEID { _expr } .
    ;               reduce using rule 17 (_feature -> OBJECTID ( _formal_list ) : TYPEID { _expr } .)


state 149

    (48) _expr -> _expr . OBJECTID ( _expr_list ) .
    =               reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    LE              reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    <               reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    /               reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    *               reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    -               reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    +               reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    .               reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    @               reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    ;               reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    )               reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    LOOP            reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    THEN            reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    OF              reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    ,               reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    }               reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    POOL            reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    ELSE            reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    IN              reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    FI              reduce using rule 48 (_expr -> _expr . OBJECTID ( _expr_list ) .)


state 150

    (49) _expr -> _expr @ TYPEID . OBJECTID ( . )
    (50) _expr -> _expr @ TYPEID . OBJECTID ( . _expr_list )
    (58) _expr_list -> . _expr
    (59) _expr_list -> . _expr , error
    (60) _expr_list -> . error , _expr_list
    (61) _expr_list -> . _expr , _expr_list
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    )               shift and go to state 159
    error           shift and go to state 132
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 93
    _expr_list                     shift and go to state 160

state 151

    (65) _listalet -> OBJECTID . : TYPEID IN _expr
    (66) _listalet -> OBJECTID . : TYPEID ASSIGN error IN _expr
    (67) _listalet -> OBJECTID . : TYPEID ASSIGN _expr IN _expr
    (68) _listalet -> OBJECTID . : TYPEID , _listalet
    (69) _listalet -> OBJECTID . : TYPEID ASSIGN _expr , _listalet
    :               shift and go to state 161


state 152

    (37) _expr -> LET OBJECTID : TYPEID , _listalet .
    =               reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    LE              reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    <               reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    /               reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    *               reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    -               reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    +               reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    .               reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    @               reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    ;               reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    )               reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    LOOP            reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    THEN            reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    OF              reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    ,               reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    }               reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    POOL            reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    ELSE            reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    IN              reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    FI              reduce using rule 37 (_expr -> LET OBJECTID : TYPEID , _listalet .)


state 153

    (38) _expr -> LET OBJECTID : TYPEID ASSIGN error . , _listalet
    ,               shift and go to state 162


state 154

    (39) _expr -> LET OBJECTID : TYPEID ASSIGN _expr . , _listalet
    (41) _expr -> LET OBJECTID : TYPEID ASSIGN _expr . IN _expr
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    ,               shift and go to state 163
    IN              shift and go to state 164
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 155

    (40) _expr -> LET OBJECTID : TYPEID IN _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
    ;               reduce using rule 40 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    )               reduce using rule 40 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    LOOP            reduce using rule 40 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    THEN            reduce using rule 40 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    OF              reduce using rule 40 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    ,               reduce using rule 40 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    }               reduce using rule 40 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    POOL            reduce using rule 40 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    ELSE            reduce using rule 40 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    IN              reduce using rule 40 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    FI              reduce using rule 40 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 156

    (43) _expr -> IF _expr THEN _expr ELSE _expr . FI
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    FI              shift and go to state 165
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 157

    (64) _lista_case -> _rama_case ; _lista_case .
    ESAC            reduce using rule 64 (_lista_case -> _rama_case ; _lista_case .)


state 158

    (62) _rama_case -> OBJECTID : TYPEID . DARROW _expr
    DARROW          shift and go to state 166


state 159

    (49) _expr -> _expr @ TYPEID . OBJECTID ( ) .
    =               reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    LE              reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    <               reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    /               reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    *               reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    -               reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    +               reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    .               reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    @               reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    ;               reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    )               reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    LOOP            reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    THEN            reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    OF              reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    ,               reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    }               reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    POOL            reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    ELSE            reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    IN              reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)
    FI              reduce using rule 49 (_expr -> _expr @ TYPEID . OBJECTID ( ) .)


state 160

    (50) _expr -> _expr @ TYPEID . OBJECTID ( _expr_list . )
    )               shift and go to state 167


state 161

    (65) _listalet -> OBJECTID : . TYPEID IN _expr
    (66) _listalet -> OBJECTID : . TYPEID ASSIGN error IN _expr
    (67) _listalet -> OBJECTID : . TYPEID ASSIGN _expr IN _expr
    (68) _listalet -> OBJECTID : . TYPEID , _listalet
    (69) _listalet -> OBJECTID : . TYPEID ASSIGN _expr , _listalet
    TYPEID          shift and go to state 168


state 162

    (38) _expr -> LET OBJECTID : TYPEID ASSIGN error , . _listalet
    (65) _listalet -> . OBJECTID : TYPEID IN _expr
    (66) _listalet -> . OBJECTID : TYPEID ASSIGN error IN _expr
    (67) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (68) _listalet -> . OBJECTID : TYPEID , _listalet
    (69) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 151

    _listalet                      shift and go to state 169

state 163

    (39) _expr -> LET OBJECTID : TYPEID ASSIGN _expr , . _listalet
    (65) _listalet -> . OBJECTID : TYPEID IN _expr
    (66) _listalet -> . OBJECTID : TYPEID ASSIGN error IN _expr
    (67) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (68) _listalet -> . OBJECTID : TYPEID , _listalet
    (69) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 151

    _listalet                      shift and go to state 170

state 164

    (41) _expr -> LET OBJECTID : TYPEID ASSIGN _expr IN . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 171

state 165

    (43) _expr -> IF _expr THEN _expr ELSE _expr FI .
    =               reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    LE              reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    <               reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    /               reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    *               reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    -               reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    +               reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    .               reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    @               reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    ;               reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    )               reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    LOOP            reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    THEN            reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    OF              reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    ,               reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    }               reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    POOL            reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    ELSE            reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    IN              reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    FI              reduce using rule 43 (_expr -> IF _expr THEN _expr ELSE _expr FI .)


state 166

    (62) _rama_case -> OBJECTID : TYPEID DARROW . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 172

state 167

    (50) _expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .
    =               reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    LE              reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    <               reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    /               reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    *               reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    -               reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    +               reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    .               reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    @               reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    ;               reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    )               reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    LOOP            reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    THEN            reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    OF              reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    ,               reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    }               reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    POOL            reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    ELSE            reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    IN              reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    FI              reduce using rule 50 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)


state 168

    (65) _listalet -> OBJECTID : TYPEID . IN _expr
    (66) _listalet -> OBJECTID : TYPEID . ASSIGN error IN _expr
    (67) _listalet -> OBJECTID : TYPEID . ASSIGN _expr IN _expr
    (68) _listalet -> OBJECTID : TYPEID . , _listalet
    (69) _listalet -> OBJECTID : TYPEID . ASSIGN _expr , _listalet
    IN              shift and go to state 173
    ASSIGN          shift and go to state 174
    ,               shift and go to state 175


state 169

    (38) _expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .
    =               reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    LE              reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    <               reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    /               reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    *               reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    -               reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    +               reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    .               reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    @               reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    ;               reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    )               reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    LOOP            reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    THEN            reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    OF              reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    ,               reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    }               reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    POOL            reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    ELSE            reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    IN              reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)
    FI              reduce using rule 38 (_expr -> LET OBJECTID : TYPEID ASSIGN error , _listalet .)


state 170

    (39) _expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .
    =               reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    LE              reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    <               reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    /               reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    *               reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    -               reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    +               reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    .               reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    @               reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ;               reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    )               reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    LOOP            reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    THEN            reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    OF              reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ,               reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    }               reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    POOL            reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ELSE            reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    IN              reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    FI              reduce using rule 39 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)


state 171

    (41) _expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
    ;               reduce using rule 41 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    )               reduce using rule 41 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    LOOP            reduce using rule 41 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    THEN            reduce using rule 41 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    OF              reduce using rule 41 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    ,               reduce using rule 41 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    }               reduce using rule 41 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    POOL            reduce using rule 41 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    ELSE            reduce using rule 41 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    IN              reduce using rule 41 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    FI              reduce using rule 41 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 172

    (62) _rama_case -> OBJECTID : TYPEID DARROW _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    ;               reduce using rule 62 (_rama_case -> OBJECTID : TYPEID DARROW _expr .)
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 173

    (65) _listalet -> OBJECTID : TYPEID IN . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 176

state 174

    (66) _listalet -> OBJECTID : TYPEID ASSIGN . error IN _expr
    (67) _listalet -> OBJECTID : TYPEID ASSIGN . _expr IN _expr
    (69) _listalet -> OBJECTID : TYPEID ASSIGN . _expr , _listalet
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    error           shift and go to state 177
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 178

state 175

    (68) _listalet -> OBJECTID : TYPEID , . _listalet
    (65) _listalet -> . OBJECTID : TYPEID IN _expr
    (66) _listalet -> . OBJECTID : TYPEID ASSIGN error IN _expr
    (67) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (68) _listalet -> . OBJECTID : TYPEID , _listalet
    (69) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 151

    _listalet                      shift and go to state 179

state 176

    (65) _listalet -> OBJECTID : TYPEID IN _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
    ;               reduce using rule 65 (_listalet -> OBJECTID : TYPEID IN _expr .)
    )               reduce using rule 65 (_listalet -> OBJECTID : TYPEID IN _expr .)
    LOOP            reduce using rule 65 (_listalet -> OBJECTID : TYPEID IN _expr .)
    THEN            reduce using rule 65 (_listalet -> OBJECTID : TYPEID IN _expr .)
    OF              reduce using rule 65 (_listalet -> OBJECTID : TYPEID IN _expr .)
    ,               reduce using rule 65 (_listalet -> OBJECTID : TYPEID IN _expr .)
    }               reduce using rule 65 (_listalet -> OBJECTID : TYPEID IN _expr .)
    POOL            reduce using rule 65 (_listalet -> OBJECTID : TYPEID IN _expr .)
    ELSE            reduce using rule 65 (_listalet -> OBJECTID : TYPEID IN _expr .)
    IN              reduce using rule 65 (_listalet -> OBJECTID : TYPEID IN _expr .)
    FI              reduce using rule 65 (_listalet -> OBJECTID : TYPEID IN _expr .)
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 177

    (66) _listalet -> OBJECTID : TYPEID ASSIGN error . IN _expr
    IN              shift and go to state 180


state 178

    (67) _listalet -> OBJECTID : TYPEID ASSIGN _expr . IN _expr
    (69) _listalet -> OBJECTID : TYPEID ASSIGN _expr . , _listalet
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    IN              shift and go to state 181
    ,               shift and go to state 182
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 179

    (68) _listalet -> OBJECTID : TYPEID , _listalet .
    =               reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    LE              reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    <               reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    /               reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    *               reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    -               reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    +               reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    .               reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    @               reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    ;               reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    )               reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    LOOP            reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    THEN            reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    OF              reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    ,               reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    }               reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    POOL            reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    ELSE            reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    IN              reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)
    FI              reduce using rule 68 (_listalet -> OBJECTID : TYPEID , _listalet .)


state 180

    (66) _listalet -> OBJECTID : TYPEID ASSIGN error IN . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 183

state 181

    (67) _listalet -> OBJECTID : TYPEID ASSIGN _expr IN . _expr
    (22) _expr -> . ( _expr )
    (23) _expr -> . _expr = _expr
    (24) _expr -> . _expr LE _expr
    (25) _expr -> . _expr < _expr
    (26) _expr -> . _expr / _expr
    (27) _expr -> . _expr * _expr
    (28) _expr -> . _expr - _expr
    (29) _expr -> . _expr + _expr
    (30) _expr -> . BOOL_CONST
    (31) _expr -> . STR_CONST
    (32) _expr -> . INT_CONST
    (33) _expr -> . OBJECTID
    (34) _expr -> . ISVOID _expr
    (35) _expr -> . NOT _expr
    (36) _expr -> . ~ _expr
    (37) _expr -> . LET OBJECTID : TYPEID , _listalet
    (38) _expr -> . LET OBJECTID : TYPEID ASSIGN error , _listalet
    (39) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (40) _expr -> . LET OBJECTID : TYPEID IN _expr
    (41) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (42) _expr -> . WHILE _expr LOOP _expr POOL
    (43) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (44) _expr -> . OBJECTID ( )
    (45) _expr -> . _expr . OBJECTID ( )
    (46) _expr -> . OBJECTID ( error )
    (47) _expr -> . OBJECTID ( _expr_list )
    (48) _expr -> . _expr . OBJECTID ( _expr_list )
    (49) _expr -> . _expr @ TYPEID . OBJECTID ( )
    (50) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (51) _expr -> . OBJECTID ASSIGN _expr
    (52) _expr -> . CASE _expr OF _lista_case ESAC
    (53) _expr -> . NEW TYPEID
    (54) _expr -> . { expresion_block }
    (               shift and go to state 48
    BOOL_CONST      shift and go to state 49
    STR_CONST       shift and go to state 50
    INT_CONST       shift and go to state 51
    OBJECTID        shift and go to state 46
    ISVOID          shift and go to state 52
    NOT             shift and go to state 53
    ~               shift and go to state 54
    LET             shift and go to state 55
    WHILE           shift and go to state 56
    IF              shift and go to state 57
    CASE            shift and go to state 58
    NEW             shift and go to state 59
    {               shift and go to state 60

    _expr                          shift and go to state 184

state 182

    (69) _listalet -> OBJECTID : TYPEID ASSIGN _expr , . _listalet
    (65) _listalet -> . OBJECTID : TYPEID IN _expr
    (66) _listalet -> . OBJECTID : TYPEID ASSIGN error IN _expr
    (67) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (68) _listalet -> . OBJECTID : TYPEID , _listalet
    (69) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 151

    _listalet                      shift and go to state 185

state 183

    (66) _listalet -> OBJECTID : TYPEID ASSIGN error IN _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
    ;               reduce using rule 66 (_listalet -> OBJECTID : TYPEID ASSIGN error IN _expr .)
    )               reduce using rule 66 (_listalet -> OBJECTID : TYPEID ASSIGN error IN _expr .)
    LOOP            reduce using rule 66 (_listalet -> OBJECTID : TYPEID ASSIGN error IN _expr .)
    THEN            reduce using rule 66 (_listalet -> OBJECTID : TYPEID ASSIGN error IN _expr .)
    OF              reduce using rule 66 (_listalet -> OBJECTID : TYPEID ASSIGN error IN _expr .)
    ,               reduce using rule 66 (_listalet -> OBJECTID : TYPEID ASSIGN error IN _expr .)
    }               reduce using rule 66 (_listalet -> OBJECTID : TYPEID ASSIGN error IN _expr .)
    POOL            reduce using rule 66 (_listalet -> OBJECTID : TYPEID ASSIGN error IN _expr .)
    ELSE            reduce using rule 66 (_listalet -> OBJECTID : TYPEID ASSIGN error IN _expr .)
    IN              reduce using rule 66 (_listalet -> OBJECTID : TYPEID ASSIGN error IN _expr .)
    FI              reduce using rule 66 (_listalet -> OBJECTID : TYPEID ASSIGN error IN _expr .)
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 184

    (67) _listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .
    (23) _expr -> _expr . = _expr
    (24) _expr -> _expr . LE _expr
    (25) _expr -> _expr . < _expr
    (26) _expr -> _expr . / _expr
    (27) _expr -> _expr . * _expr
    (28) _expr -> _expr . - _expr
    (29) _expr -> _expr . + _expr
    (45) _expr -> _expr . . OBJECTID ( )
    (48) _expr -> _expr . . OBJECTID ( _expr_list )
    (49) _expr -> _expr . @ TYPEID . OBJECTID ( )
    (50) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
    ;               reduce using rule 67 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    )               reduce using rule 67 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    LOOP            reduce using rule 67 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    THEN            reduce using rule 67 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    OF              reduce using rule 67 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    ,               reduce using rule 67 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    }               reduce using rule 67 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    POOL            reduce using rule 67 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    ELSE            reduce using rule 67 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    IN              reduce using rule 67 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    FI              reduce using rule 67 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    =               shift and go to state 66
    LE              shift and go to state 67
    <               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    .               shift and go to state 73
    @               shift and go to state 74


state 185

    (69) _listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .
    =               reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    LE              reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    <               reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    /               reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    *               reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    -               reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    +               reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    .               reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    @               reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ;               reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    )               reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    LOOP            reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    THEN            reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    OF              reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ,               reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    }               reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    POOL            reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ELSE            reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    IN              reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    FI              reduce using rule 69 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)


Conflicts:

shift/reduce conflict for = in state 155 resolved as shift
shift/reduce conflict for LE in state 155 resolved as shift
shift/reduce conflict for < in state 155 resolved as shift
shift/reduce conflict for / in state 155 resolved as shift
shift/reduce conflict for * in state 155 resolved as shift
shift/reduce conflict for - in state 155 resolved as shift
shift/reduce conflict for + in state 155 resolved as shift
shift/reduce conflict for . in state 155 resolved as shift
shift/reduce conflict for @ in state 155 resolved as shift
shift/reduce conflict for = in state 171 resolved as shift
shift/reduce conflict for LE in state 171 resolved as shift
shift/reduce conflict for < in state 171 resolved as shift
shift/reduce conflict for / in state 171 resolved as shift
shift/reduce conflict for * in state 171 resolved as shift
shift/reduce conflict for - in state 171 resolved as shift
shift/reduce conflict for + in state 171 resolved as shift
shift/reduce conflict for . in state 171 resolved as shift
shift/reduce conflict for @ in state 171 resolved as shift
shift/reduce conflict for = in state 176 resolved as shift
shift/reduce conflict for LE in state 176 resolved as shift
shift/reduce conflict for < in state 176 resolved as shift
shift/reduce conflict for / in state 176 resolved as shift
shift/reduce conflict for * in state 176 resolved as shift
shift/reduce conflict for - in state 176 resolved as shift
shift/reduce conflict for + in state 176 resolved as shift
shift/reduce conflict for . in state 176 resolved as shift
shift/reduce conflict for @ in state 176 resolved as shift
shift/reduce conflict for = in state 183 resolved as shift
shift/reduce conflict for LE in state 183 resolved as shift
shift/reduce conflict for < in state 183 resolved as shift
shift/reduce conflict for / in state 183 resolved as shift
shift/reduce conflict for * in state 183 resolved as shift
shift/reduce conflict for - in state 183 resolved as shift
shift/reduce conflict for + in state 183 resolved as shift
shift/reduce conflict for . in state 183 resolved as shift
shift/reduce conflict for @ in state 183 resolved as shift
shift/reduce conflict for = in state 184 resolved as shift
shift/reduce conflict for LE in state 184 resolved as shift
shift/reduce conflict for < in state 184 resolved as shift
shift/reduce conflict for / in state 184 resolved as shift
shift/reduce conflict for * in state 184 resolved as shift
shift/reduce conflict for - in state 184 resolved as shift
shift/reduce conflict for + in state 184 resolved as shift
shift/reduce conflict for . in state 184 resolved as shift
shift/reduce conflict for @ in state 184 resolved as shift
reduce/reduce conflict in state 20 resolved using rule _feature_list -> _feature ;
rejected rule (_feature_list -> <empty>) in state 20