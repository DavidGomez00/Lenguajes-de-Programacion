Grammar:

Rule 0     S' -> _program
Rule 1     _program -> _class ; _program
Rule 2     _program -> _class ;
Rule 3     _class -> CLASS TYPEID INHERITS TYPEID { _feature_list }
Rule 4     _class -> CLASS TYPEID { _feature_list }
Rule 5     _feature_list -> <empty>
Rule 6     _feature_list -> _feature
Rule 7     _feature_list -> _feature ; _feature_list
Rule 8     _feature -> OBJECTID : TYPEID
Rule 9     _feature -> OBJECTID : TYPEID ASSIGN _expr  [precedence=left, level=1]
Rule 10    _feature -> OBJECTID ( _formal_list ) : TYPEID { _expr }
Rule 11    _formal_list -> <empty>
Rule 12    _formal_list -> _formal
Rule 13    _formal_list -> _formal , _formal_list
Rule 14    _formal -> OBJECTID : TYPEID
Rule 15    _expr -> ( _expr )
Rule 16    _expr -> _expr = _expr  [precedence=left, level=3]
Rule 17    _expr -> _expr LE _expr  [precedence=left, level=3]
Rule 18    _expr -> _expr < _expr  [precedence=left, level=3]
Rule 19    _expr -> _expr / _expr  [precedence=left, level=5]
Rule 20    _expr -> _expr * _expr  [precedence=left, level=5]
Rule 21    _expr -> _expr - _expr  [precedence=left, level=4]
Rule 22    _expr -> _expr + _expr  [precedence=left, level=4]
Rule 23    _expr -> BOOL_CONST
Rule 24    _expr -> STR_CONST
Rule 25    _expr -> INT_CONST
Rule 26    _expr -> OBJECTID
Rule 27    _expr -> ISVOID _expr  [precedence=left, level=6]
Rule 28    _expr -> NOT _expr  [precedence=left, level=2]
Rule 29    _expr -> ~ _expr  [precedence=left, level=7]
Rule 30    _expr -> { _expr ; _expr ; }
Rule 31    _expr -> LET OBJECTID : TYPEID , _listalet
Rule 32    _expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet
Rule 33    _expr -> LET OBJECTID : TYPEID IN _expr
Rule 34    _expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr
Rule 35    _expr -> WHILE _expr LOOP _expr POOL
Rule 36    _expr -> IF _expr THEN _expr ELSE _expr FI
Rule 37    _expr -> _expr . OBJECTID ( _expr_list )
Rule 38    _expr -> _expr @ TYPEID . OBJECTID ( _expr_list )
Rule 39    _expr -> _expr ASSIGN _expr  [precedence=left, level=1]
Rule 40    _expr -> CASE _expr OF _lista_case + ESAC
Rule 41    _expr -> NEW OBJECTID
Rule 42    _expr -> { expresion_block }
Rule 43    expresion_block -> _expr ; expresion_block
Rule 44    expresion_block -> _expr ;
Rule 45    _expr_list -> <empty>
Rule 46    _expr_list -> _expr
Rule 47    _expr_list -> _expr , _expr_list
Rule 48    _rama_case -> OBJECTID : TYPEID DARROW _expr
Rule 49    _lista_case -> <empty>
Rule 50    _lista_case -> _rama_case ; _lista_case
Rule 51    _listalet -> OBJECTID : TYPEID IN _expr
Rule 52    _listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr
Rule 53    _listalet -> OBJECTID : TYPEID , _listalet
Rule 54    _listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet

Unused terminals:

    ERROR

Terminals, with rules where they appear:

(                    : 10 15 37 38
)                    : 10 15 37 38
*                    : 20
+                    : 22 40
,                    : 13 31 32 47 53 54
-                    : 21
.                    : 37 38
/                    : 19
:                    : 8 9 10 14 31 32 33 34 48 51 52 53 54
;                    : 1 2 7 30 30 43 44 50
<                    : 18
=                    : 16
@                    : 38
ASSIGN               : 9 32 34 39 52 54
BOOL_CONST           : 23
CASE                 : 40
CLASS                : 3 4
DARROW               : 48
ELSE                 : 36
ERROR                : 
ESAC                 : 40
FI                   : 36
IF                   : 36
IN                   : 33 34 51 52
INHERITS             : 3
INT_CONST            : 25
ISVOID               : 27
LE                   : 17
LET                  : 31 32 33 34
LOOP                 : 35
NEW                  : 41
NOT                  : 28
OBJECTID             : 8 9 10 14 26 31 32 33 34 37 38 41 48 51 52 53 54
OF                   : 40
POOL                 : 35
STR_CONST            : 24
THEN                 : 36
TYPEID               : 3 3 4 8 9 10 14 31 32 33 34 38 48 51 52 53 54
WHILE                : 35
error                : 
{                    : 3 4 10 30 42
}                    : 3 4 10 30 42
~                    : 29

Nonterminals, with rules where they appear:

_class               : 1 2
_expr                : 9 10 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 27 28 29 30 30 32 33 34 34 35 35 36 36 36 37 38 39 39 40 43 44 46 47 48 51 52 52 54
_expr_list           : 37 38 47
_feature             : 6 7
_feature_list        : 3 4 7
_formal              : 12 13
_formal_list         : 10 13
_lista_case          : 40 50
_listalet            : 31 32 53 54
_program             : 1 0
_rama_case           : 50
expresion_block      : 42 43


state 0

    (0) S' -> . _program
    (1) _program -> . _class ; _program
    (2) _program -> . _class ;
    (3) _class -> . CLASS TYPEID INHERITS TYPEID { _feature_list }
    (4) _class -> . CLASS TYPEID { _feature_list }
    CLASS           shift and go to state 3

    _program                       shift and go to state 1
    _class                         shift and go to state 2

state 1

    (0) S' -> _program .


state 2

    (1) _program -> _class . ; _program
    (2) _program -> _class . ;
    ;               shift and go to state 4


state 3

    (3) _class -> CLASS . TYPEID INHERITS TYPEID { _feature_list }
    (4) _class -> CLASS . TYPEID { _feature_list }
    TYPEID          shift and go to state 5


state 4

    (1) _program -> _class ; . _program
    (2) _program -> _class ; .
    (1) _program -> . _class ; _program
    (2) _program -> . _class ;
    (3) _class -> . CLASS TYPEID INHERITS TYPEID { _feature_list }
    (4) _class -> . CLASS TYPEID { _feature_list }
    $end            reduce using rule 2 (_program -> _class ; .)
    CLASS           shift and go to state 3

    _class                         shift and go to state 2
    _program                       shift and go to state 6

state 5

    (3) _class -> CLASS TYPEID . INHERITS TYPEID { _feature_list }
    (4) _class -> CLASS TYPEID . { _feature_list }
    INHERITS        shift and go to state 7
    {               shift and go to state 8


state 6

    (1) _program -> _class ; _program .
    $end            reduce using rule 1 (_program -> _class ; _program .)


state 7

    (3) _class -> CLASS TYPEID INHERITS . TYPEID { _feature_list }
    TYPEID          shift and go to state 9


state 8

    (4) _class -> CLASS TYPEID { . _feature_list }
    (5) _feature_list -> .
    (6) _feature_list -> . _feature
    (7) _feature_list -> . _feature ; _feature_list
    (8) _feature -> . OBJECTID : TYPEID
    (9) _feature -> . OBJECTID : TYPEID ASSIGN _expr
    (10) _feature -> . OBJECTID ( _formal_list ) : TYPEID { _expr }
    }               reduce using rule 5 (_feature_list -> .)
    OBJECTID        shift and go to state 12

    _feature_list                  shift and go to state 10
    _feature                       shift and go to state 11

state 9

    (3) _class -> CLASS TYPEID INHERITS TYPEID . { _feature_list }
    {               shift and go to state 13


state 10

    (4) _class -> CLASS TYPEID { _feature_list . }
    }               shift and go to state 14


state 11

    (6) _feature_list -> _feature .
    (7) _feature_list -> _feature . ; _feature_list
    }               reduce using rule 6 (_feature_list -> _feature .)
    ;               shift and go to state 15


state 12

    (8) _feature -> OBJECTID . : TYPEID
    (9) _feature -> OBJECTID . : TYPEID ASSIGN _expr
    (10) _feature -> OBJECTID . ( _formal_list ) : TYPEID { _expr }
    :               shift and go to state 16
    (               shift and go to state 17


state 13

    (3) _class -> CLASS TYPEID INHERITS TYPEID { . _feature_list }
    (5) _feature_list -> .
    (6) _feature_list -> . _feature
    (7) _feature_list -> . _feature ; _feature_list
    (8) _feature -> . OBJECTID : TYPEID
    (9) _feature -> . OBJECTID : TYPEID ASSIGN _expr
    (10) _feature -> . OBJECTID ( _formal_list ) : TYPEID { _expr }
    }               reduce using rule 5 (_feature_list -> .)
    OBJECTID        shift and go to state 12

    _feature_list                  shift and go to state 18
    _feature                       shift and go to state 11

state 14

    (4) _class -> CLASS TYPEID { _feature_list } .
    ;               reduce using rule 4 (_class -> CLASS TYPEID { _feature_list } .)


state 15

    (7) _feature_list -> _feature ; . _feature_list
    (5) _feature_list -> .
    (6) _feature_list -> . _feature
    (7) _feature_list -> . _feature ; _feature_list
    (8) _feature -> . OBJECTID : TYPEID
    (9) _feature -> . OBJECTID : TYPEID ASSIGN _expr
    (10) _feature -> . OBJECTID ( _formal_list ) : TYPEID { _expr }
    }               reduce using rule 5 (_feature_list -> .)
    OBJECTID        shift and go to state 12

    _feature                       shift and go to state 11
    _feature_list                  shift and go to state 19

state 16

    (8) _feature -> OBJECTID : . TYPEID
    (9) _feature -> OBJECTID : . TYPEID ASSIGN _expr
    TYPEID          shift and go to state 20


state 17

    (10) _feature -> OBJECTID ( . _formal_list ) : TYPEID { _expr }
    (11) _formal_list -> .
    (12) _formal_list -> . _formal
    (13) _formal_list -> . _formal , _formal_list
    (14) _formal -> . OBJECTID : TYPEID
    )               reduce using rule 11 (_formal_list -> .)
    OBJECTID        shift and go to state 21

    _formal_list                   shift and go to state 22
    _formal                        shift and go to state 23

state 18

    (3) _class -> CLASS TYPEID INHERITS TYPEID { _feature_list . }
    }               shift and go to state 24


state 19

    (7) _feature_list -> _feature ; _feature_list .
    }               reduce using rule 7 (_feature_list -> _feature ; _feature_list .)


state 20

    (8) _feature -> OBJECTID : TYPEID .
    (9) _feature -> OBJECTID : TYPEID . ASSIGN _expr
    ;               reduce using rule 8 (_feature -> OBJECTID : TYPEID .)
    }               reduce using rule 8 (_feature -> OBJECTID : TYPEID .)
    ASSIGN          shift and go to state 25


state 21

    (14) _formal -> OBJECTID . : TYPEID
    :               shift and go to state 26


state 22

    (10) _feature -> OBJECTID ( _formal_list . ) : TYPEID { _expr }
    )               shift and go to state 27


state 23

    (12) _formal_list -> _formal .
    (13) _formal_list -> _formal . , _formal_list
    )               reduce using rule 12 (_formal_list -> _formal .)
    ,               shift and go to state 28


state 24

    (3) _class -> CLASS TYPEID INHERITS TYPEID { _feature_list } .
    ;               reduce using rule 3 (_class -> CLASS TYPEID INHERITS TYPEID { _feature_list } .)


state 25

    (9) _feature -> OBJECTID : TYPEID ASSIGN . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 30

state 26

    (14) _formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 44


state 27

    (10) _feature -> OBJECTID ( _formal_list ) . : TYPEID { _expr }
    :               shift and go to state 45


state 28

    (13) _formal_list -> _formal , . _formal_list
    (11) _formal_list -> .
    (12) _formal_list -> . _formal
    (13) _formal_list -> . _formal , _formal_list
    (14) _formal -> . OBJECTID : TYPEID
    )               reduce using rule 11 (_formal_list -> .)
    OBJECTID        shift and go to state 21

    _formal                        shift and go to state 23
    _formal_list                   shift and go to state 46

state 29

    (26) _expr -> OBJECTID .
    =               reduce using rule 26 (_expr -> OBJECTID .)
    LE              reduce using rule 26 (_expr -> OBJECTID .)
    <               reduce using rule 26 (_expr -> OBJECTID .)
    /               reduce using rule 26 (_expr -> OBJECTID .)
    *               reduce using rule 26 (_expr -> OBJECTID .)
    -               reduce using rule 26 (_expr -> OBJECTID .)
    +               reduce using rule 26 (_expr -> OBJECTID .)
    .               reduce using rule 26 (_expr -> OBJECTID .)
    @               reduce using rule 26 (_expr -> OBJECTID .)
    ASSIGN          reduce using rule 26 (_expr -> OBJECTID .)
    ;               reduce using rule 26 (_expr -> OBJECTID .)
    }               reduce using rule 26 (_expr -> OBJECTID .)
    )               reduce using rule 26 (_expr -> OBJECTID .)
    LOOP            reduce using rule 26 (_expr -> OBJECTID .)
    THEN            reduce using rule 26 (_expr -> OBJECTID .)
    OF              reduce using rule 26 (_expr -> OBJECTID .)
    POOL            reduce using rule 26 (_expr -> OBJECTID .)
    ELSE            reduce using rule 26 (_expr -> OBJECTID .)
    ,               reduce using rule 26 (_expr -> OBJECTID .)
    IN              reduce using rule 26 (_expr -> OBJECTID .)
    FI              reduce using rule 26 (_expr -> OBJECTID .)


state 30

    (9) _feature -> OBJECTID : TYPEID ASSIGN _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    ;               reduce using rule 9 (_feature -> OBJECTID : TYPEID ASSIGN _expr .)
    }               reduce using rule 9 (_feature -> OBJECTID : TYPEID ASSIGN _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 31

    (15) _expr -> ( . _expr )
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 57

state 32

    (23) _expr -> BOOL_CONST .
    =               reduce using rule 23 (_expr -> BOOL_CONST .)
    LE              reduce using rule 23 (_expr -> BOOL_CONST .)
    <               reduce using rule 23 (_expr -> BOOL_CONST .)
    /               reduce using rule 23 (_expr -> BOOL_CONST .)
    *               reduce using rule 23 (_expr -> BOOL_CONST .)
    -               reduce using rule 23 (_expr -> BOOL_CONST .)
    +               reduce using rule 23 (_expr -> BOOL_CONST .)
    .               reduce using rule 23 (_expr -> BOOL_CONST .)
    @               reduce using rule 23 (_expr -> BOOL_CONST .)
    ASSIGN          reduce using rule 23 (_expr -> BOOL_CONST .)
    ;               reduce using rule 23 (_expr -> BOOL_CONST .)
    }               reduce using rule 23 (_expr -> BOOL_CONST .)
    )               reduce using rule 23 (_expr -> BOOL_CONST .)
    LOOP            reduce using rule 23 (_expr -> BOOL_CONST .)
    THEN            reduce using rule 23 (_expr -> BOOL_CONST .)
    OF              reduce using rule 23 (_expr -> BOOL_CONST .)
    POOL            reduce using rule 23 (_expr -> BOOL_CONST .)
    ELSE            reduce using rule 23 (_expr -> BOOL_CONST .)
    ,               reduce using rule 23 (_expr -> BOOL_CONST .)
    IN              reduce using rule 23 (_expr -> BOOL_CONST .)
    FI              reduce using rule 23 (_expr -> BOOL_CONST .)


state 33

    (24) _expr -> STR_CONST .
    =               reduce using rule 24 (_expr -> STR_CONST .)
    LE              reduce using rule 24 (_expr -> STR_CONST .)
    <               reduce using rule 24 (_expr -> STR_CONST .)
    /               reduce using rule 24 (_expr -> STR_CONST .)
    *               reduce using rule 24 (_expr -> STR_CONST .)
    -               reduce using rule 24 (_expr -> STR_CONST .)
    +               reduce using rule 24 (_expr -> STR_CONST .)
    .               reduce using rule 24 (_expr -> STR_CONST .)
    @               reduce using rule 24 (_expr -> STR_CONST .)
    ASSIGN          reduce using rule 24 (_expr -> STR_CONST .)
    ;               reduce using rule 24 (_expr -> STR_CONST .)
    }               reduce using rule 24 (_expr -> STR_CONST .)
    )               reduce using rule 24 (_expr -> STR_CONST .)
    LOOP            reduce using rule 24 (_expr -> STR_CONST .)
    THEN            reduce using rule 24 (_expr -> STR_CONST .)
    OF              reduce using rule 24 (_expr -> STR_CONST .)
    POOL            reduce using rule 24 (_expr -> STR_CONST .)
    ELSE            reduce using rule 24 (_expr -> STR_CONST .)
    ,               reduce using rule 24 (_expr -> STR_CONST .)
    IN              reduce using rule 24 (_expr -> STR_CONST .)
    FI              reduce using rule 24 (_expr -> STR_CONST .)


state 34

    (25) _expr -> INT_CONST .
    =               reduce using rule 25 (_expr -> INT_CONST .)
    LE              reduce using rule 25 (_expr -> INT_CONST .)
    <               reduce using rule 25 (_expr -> INT_CONST .)
    /               reduce using rule 25 (_expr -> INT_CONST .)
    *               reduce using rule 25 (_expr -> INT_CONST .)
    -               reduce using rule 25 (_expr -> INT_CONST .)
    +               reduce using rule 25 (_expr -> INT_CONST .)
    .               reduce using rule 25 (_expr -> INT_CONST .)
    @               reduce using rule 25 (_expr -> INT_CONST .)
    ASSIGN          reduce using rule 25 (_expr -> INT_CONST .)
    ;               reduce using rule 25 (_expr -> INT_CONST .)
    }               reduce using rule 25 (_expr -> INT_CONST .)
    )               reduce using rule 25 (_expr -> INT_CONST .)
    LOOP            reduce using rule 25 (_expr -> INT_CONST .)
    THEN            reduce using rule 25 (_expr -> INT_CONST .)
    OF              reduce using rule 25 (_expr -> INT_CONST .)
    POOL            reduce using rule 25 (_expr -> INT_CONST .)
    ELSE            reduce using rule 25 (_expr -> INT_CONST .)
    ,               reduce using rule 25 (_expr -> INT_CONST .)
    IN              reduce using rule 25 (_expr -> INT_CONST .)
    FI              reduce using rule 25 (_expr -> INT_CONST .)


state 35

    (27) _expr -> ISVOID . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 58

state 36

    (28) _expr -> NOT . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 59

state 37

    (29) _expr -> ~ . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 60

state 38

    (30) _expr -> { . _expr ; _expr ; }
    (42) _expr -> { . expresion_block }
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (43) expresion_block -> . _expr ; expresion_block
    (44) expresion_block -> . _expr ;
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 61
    expresion_block                shift and go to state 62

state 39

    (31) _expr -> LET . OBJECTID : TYPEID , _listalet
    (32) _expr -> LET . OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> LET . OBJECTID : TYPEID IN _expr
    (34) _expr -> LET . OBJECTID : TYPEID ASSIGN _expr IN _expr
    OBJECTID        shift and go to state 63


state 40

    (35) _expr -> WHILE . _expr LOOP _expr POOL
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 64

state 41

    (36) _expr -> IF . _expr THEN _expr ELSE _expr FI
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 65

state 42

    (40) _expr -> CASE . _expr OF _lista_case + ESAC
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 66

state 43

    (41) _expr -> NEW . OBJECTID
    OBJECTID        shift and go to state 67


state 44

    (14) _formal -> OBJECTID : TYPEID .
    ,               reduce using rule 14 (_formal -> OBJECTID : TYPEID .)
    )               reduce using rule 14 (_formal -> OBJECTID : TYPEID .)


state 45

    (10) _feature -> OBJECTID ( _formal_list ) : . TYPEID { _expr }
    TYPEID          shift and go to state 68


state 46

    (13) _formal_list -> _formal , _formal_list .
    )               reduce using rule 13 (_formal_list -> _formal , _formal_list .)


state 47

    (39) _expr -> _expr ASSIGN . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 69

state 48

    (16) _expr -> _expr = . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 70

state 49

    (17) _expr -> _expr LE . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 71

state 50

    (18) _expr -> _expr < . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 72

state 51

    (19) _expr -> _expr / . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 73

state 52

    (20) _expr -> _expr * . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 74

state 53

    (21) _expr -> _expr - . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 75

state 54

    (22) _expr -> _expr + . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 76

state 55

    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    OBJECTID        shift and go to state 77


state 56

    (38) _expr -> _expr @ . TYPEID . OBJECTID ( _expr_list )
    TYPEID          shift and go to state 78


state 57

    (15) _expr -> ( _expr . )
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    )               shift and go to state 79
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 58

    (27) _expr -> ISVOID _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 27 (_expr -> ISVOID _expr .)
    LE              reduce using rule 27 (_expr -> ISVOID _expr .)
    <               reduce using rule 27 (_expr -> ISVOID _expr .)
    /               reduce using rule 27 (_expr -> ISVOID _expr .)
    *               reduce using rule 27 (_expr -> ISVOID _expr .)
    -               reduce using rule 27 (_expr -> ISVOID _expr .)
    +               reduce using rule 27 (_expr -> ISVOID _expr .)
    ASSIGN          reduce using rule 27 (_expr -> ISVOID _expr .)
    ;               reduce using rule 27 (_expr -> ISVOID _expr .)
    }               reduce using rule 27 (_expr -> ISVOID _expr .)
    )               reduce using rule 27 (_expr -> ISVOID _expr .)
    LOOP            reduce using rule 27 (_expr -> ISVOID _expr .)
    THEN            reduce using rule 27 (_expr -> ISVOID _expr .)
    OF              reduce using rule 27 (_expr -> ISVOID _expr .)
    POOL            reduce using rule 27 (_expr -> ISVOID _expr .)
    ELSE            reduce using rule 27 (_expr -> ISVOID _expr .)
    ,               reduce using rule 27 (_expr -> ISVOID _expr .)
    IN              reduce using rule 27 (_expr -> ISVOID _expr .)
    FI              reduce using rule 27 (_expr -> ISVOID _expr .)
    .               shift and go to state 55
    @               shift and go to state 56


state 59

    (28) _expr -> NOT _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    ASSIGN          reduce using rule 28 (_expr -> NOT _expr .)
    ;               reduce using rule 28 (_expr -> NOT _expr .)
    }               reduce using rule 28 (_expr -> NOT _expr .)
    )               reduce using rule 28 (_expr -> NOT _expr .)
    LOOP            reduce using rule 28 (_expr -> NOT _expr .)
    THEN            reduce using rule 28 (_expr -> NOT _expr .)
    OF              reduce using rule 28 (_expr -> NOT _expr .)
    POOL            reduce using rule 28 (_expr -> NOT _expr .)
    ELSE            reduce using rule 28 (_expr -> NOT _expr .)
    ,               reduce using rule 28 (_expr -> NOT _expr .)
    IN              reduce using rule 28 (_expr -> NOT _expr .)
    FI              reduce using rule 28 (_expr -> NOT _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56


state 60

    (29) _expr -> ~ _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 29 (_expr -> ~ _expr .)
    LE              reduce using rule 29 (_expr -> ~ _expr .)
    <               reduce using rule 29 (_expr -> ~ _expr .)
    /               reduce using rule 29 (_expr -> ~ _expr .)
    *               reduce using rule 29 (_expr -> ~ _expr .)
    -               reduce using rule 29 (_expr -> ~ _expr .)
    +               reduce using rule 29 (_expr -> ~ _expr .)
    ASSIGN          reduce using rule 29 (_expr -> ~ _expr .)
    ;               reduce using rule 29 (_expr -> ~ _expr .)
    }               reduce using rule 29 (_expr -> ~ _expr .)
    )               reduce using rule 29 (_expr -> ~ _expr .)
    LOOP            reduce using rule 29 (_expr -> ~ _expr .)
    THEN            reduce using rule 29 (_expr -> ~ _expr .)
    OF              reduce using rule 29 (_expr -> ~ _expr .)
    POOL            reduce using rule 29 (_expr -> ~ _expr .)
    ELSE            reduce using rule 29 (_expr -> ~ _expr .)
    ,               reduce using rule 29 (_expr -> ~ _expr .)
    IN              reduce using rule 29 (_expr -> ~ _expr .)
    FI              reduce using rule 29 (_expr -> ~ _expr .)
    .               shift and go to state 55
    @               shift and go to state 56


state 61

    (30) _expr -> { _expr . ; _expr ; }
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    (43) expresion_block -> _expr . ; expresion_block
    (44) expresion_block -> _expr . ;
    ;               shift and go to state 80
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 62

    (42) _expr -> { expresion_block . }
    }               shift and go to state 81


state 63

    (31) _expr -> LET OBJECTID . : TYPEID , _listalet
    (32) _expr -> LET OBJECTID . : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> LET OBJECTID . : TYPEID IN _expr
    (34) _expr -> LET OBJECTID . : TYPEID ASSIGN _expr IN _expr
    :               shift and go to state 82


state 64

    (35) _expr -> WHILE _expr . LOOP _expr POOL
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    LOOP            shift and go to state 83
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 65

    (36) _expr -> IF _expr . THEN _expr ELSE _expr FI
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    THEN            shift and go to state 84
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 66

    (40) _expr -> CASE _expr . OF _lista_case + ESAC
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    OF              shift and go to state 85
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 67

    (41) _expr -> NEW OBJECTID .
    =               reduce using rule 41 (_expr -> NEW OBJECTID .)
    LE              reduce using rule 41 (_expr -> NEW OBJECTID .)
    <               reduce using rule 41 (_expr -> NEW OBJECTID .)
    /               reduce using rule 41 (_expr -> NEW OBJECTID .)
    *               reduce using rule 41 (_expr -> NEW OBJECTID .)
    -               reduce using rule 41 (_expr -> NEW OBJECTID .)
    +               reduce using rule 41 (_expr -> NEW OBJECTID .)
    .               reduce using rule 41 (_expr -> NEW OBJECTID .)
    @               reduce using rule 41 (_expr -> NEW OBJECTID .)
    ASSIGN          reduce using rule 41 (_expr -> NEW OBJECTID .)
    ;               reduce using rule 41 (_expr -> NEW OBJECTID .)
    }               reduce using rule 41 (_expr -> NEW OBJECTID .)
    )               reduce using rule 41 (_expr -> NEW OBJECTID .)
    LOOP            reduce using rule 41 (_expr -> NEW OBJECTID .)
    THEN            reduce using rule 41 (_expr -> NEW OBJECTID .)
    OF              reduce using rule 41 (_expr -> NEW OBJECTID .)
    POOL            reduce using rule 41 (_expr -> NEW OBJECTID .)
    ELSE            reduce using rule 41 (_expr -> NEW OBJECTID .)
    ,               reduce using rule 41 (_expr -> NEW OBJECTID .)
    IN              reduce using rule 41 (_expr -> NEW OBJECTID .)
    FI              reduce using rule 41 (_expr -> NEW OBJECTID .)


state 68

    (10) _feature -> OBJECTID ( _formal_list ) : TYPEID . { _expr }
    {               shift and go to state 86


state 69

    (39) _expr -> _expr ASSIGN _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    ASSIGN          reduce using rule 39 (_expr -> _expr ASSIGN _expr .)
    ;               reduce using rule 39 (_expr -> _expr ASSIGN _expr .)
    }               reduce using rule 39 (_expr -> _expr ASSIGN _expr .)
    )               reduce using rule 39 (_expr -> _expr ASSIGN _expr .)
    LOOP            reduce using rule 39 (_expr -> _expr ASSIGN _expr .)
    THEN            reduce using rule 39 (_expr -> _expr ASSIGN _expr .)
    OF              reduce using rule 39 (_expr -> _expr ASSIGN _expr .)
    POOL            reduce using rule 39 (_expr -> _expr ASSIGN _expr .)
    ELSE            reduce using rule 39 (_expr -> _expr ASSIGN _expr .)
    ,               reduce using rule 39 (_expr -> _expr ASSIGN _expr .)
    IN              reduce using rule 39 (_expr -> _expr ASSIGN _expr .)
    FI              reduce using rule 39 (_expr -> _expr ASSIGN _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56


state 70

    (16) _expr -> _expr = _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 16 (_expr -> _expr = _expr .)
    LE              reduce using rule 16 (_expr -> _expr = _expr .)
    <               reduce using rule 16 (_expr -> _expr = _expr .)
    ASSIGN          reduce using rule 16 (_expr -> _expr = _expr .)
    ;               reduce using rule 16 (_expr -> _expr = _expr .)
    }               reduce using rule 16 (_expr -> _expr = _expr .)
    )               reduce using rule 16 (_expr -> _expr = _expr .)
    LOOP            reduce using rule 16 (_expr -> _expr = _expr .)
    THEN            reduce using rule 16 (_expr -> _expr = _expr .)
    OF              reduce using rule 16 (_expr -> _expr = _expr .)
    POOL            reduce using rule 16 (_expr -> _expr = _expr .)
    ELSE            reduce using rule 16 (_expr -> _expr = _expr .)
    ,               reduce using rule 16 (_expr -> _expr = _expr .)
    IN              reduce using rule 16 (_expr -> _expr = _expr .)
    FI              reduce using rule 16 (_expr -> _expr = _expr .)
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56


state 71

    (17) _expr -> _expr LE _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 17 (_expr -> _expr LE _expr .)
    LE              reduce using rule 17 (_expr -> _expr LE _expr .)
    <               reduce using rule 17 (_expr -> _expr LE _expr .)
    ASSIGN          reduce using rule 17 (_expr -> _expr LE _expr .)
    ;               reduce using rule 17 (_expr -> _expr LE _expr .)
    }               reduce using rule 17 (_expr -> _expr LE _expr .)
    )               reduce using rule 17 (_expr -> _expr LE _expr .)
    LOOP            reduce using rule 17 (_expr -> _expr LE _expr .)
    THEN            reduce using rule 17 (_expr -> _expr LE _expr .)
    OF              reduce using rule 17 (_expr -> _expr LE _expr .)
    POOL            reduce using rule 17 (_expr -> _expr LE _expr .)
    ELSE            reduce using rule 17 (_expr -> _expr LE _expr .)
    ,               reduce using rule 17 (_expr -> _expr LE _expr .)
    IN              reduce using rule 17 (_expr -> _expr LE _expr .)
    FI              reduce using rule 17 (_expr -> _expr LE _expr .)
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56


state 72

    (18) _expr -> _expr < _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 18 (_expr -> _expr < _expr .)
    LE              reduce using rule 18 (_expr -> _expr < _expr .)
    <               reduce using rule 18 (_expr -> _expr < _expr .)
    ASSIGN          reduce using rule 18 (_expr -> _expr < _expr .)
    ;               reduce using rule 18 (_expr -> _expr < _expr .)
    }               reduce using rule 18 (_expr -> _expr < _expr .)
    )               reduce using rule 18 (_expr -> _expr < _expr .)
    LOOP            reduce using rule 18 (_expr -> _expr < _expr .)
    THEN            reduce using rule 18 (_expr -> _expr < _expr .)
    OF              reduce using rule 18 (_expr -> _expr < _expr .)
    POOL            reduce using rule 18 (_expr -> _expr < _expr .)
    ELSE            reduce using rule 18 (_expr -> _expr < _expr .)
    ,               reduce using rule 18 (_expr -> _expr < _expr .)
    IN              reduce using rule 18 (_expr -> _expr < _expr .)
    FI              reduce using rule 18 (_expr -> _expr < _expr .)
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56


state 73

    (19) _expr -> _expr / _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 19 (_expr -> _expr / _expr .)
    LE              reduce using rule 19 (_expr -> _expr / _expr .)
    <               reduce using rule 19 (_expr -> _expr / _expr .)
    /               reduce using rule 19 (_expr -> _expr / _expr .)
    *               reduce using rule 19 (_expr -> _expr / _expr .)
    -               reduce using rule 19 (_expr -> _expr / _expr .)
    +               reduce using rule 19 (_expr -> _expr / _expr .)
    ASSIGN          reduce using rule 19 (_expr -> _expr / _expr .)
    ;               reduce using rule 19 (_expr -> _expr / _expr .)
    }               reduce using rule 19 (_expr -> _expr / _expr .)
    )               reduce using rule 19 (_expr -> _expr / _expr .)
    LOOP            reduce using rule 19 (_expr -> _expr / _expr .)
    THEN            reduce using rule 19 (_expr -> _expr / _expr .)
    OF              reduce using rule 19 (_expr -> _expr / _expr .)
    POOL            reduce using rule 19 (_expr -> _expr / _expr .)
    ELSE            reduce using rule 19 (_expr -> _expr / _expr .)
    ,               reduce using rule 19 (_expr -> _expr / _expr .)
    IN              reduce using rule 19 (_expr -> _expr / _expr .)
    FI              reduce using rule 19 (_expr -> _expr / _expr .)
    .               shift and go to state 55
    @               shift and go to state 56


state 74

    (20) _expr -> _expr * _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 20 (_expr -> _expr * _expr .)
    LE              reduce using rule 20 (_expr -> _expr * _expr .)
    <               reduce using rule 20 (_expr -> _expr * _expr .)
    /               reduce using rule 20 (_expr -> _expr * _expr .)
    *               reduce using rule 20 (_expr -> _expr * _expr .)
    -               reduce using rule 20 (_expr -> _expr * _expr .)
    +               reduce using rule 20 (_expr -> _expr * _expr .)
    ASSIGN          reduce using rule 20 (_expr -> _expr * _expr .)
    ;               reduce using rule 20 (_expr -> _expr * _expr .)
    }               reduce using rule 20 (_expr -> _expr * _expr .)
    )               reduce using rule 20 (_expr -> _expr * _expr .)
    LOOP            reduce using rule 20 (_expr -> _expr * _expr .)
    THEN            reduce using rule 20 (_expr -> _expr * _expr .)
    OF              reduce using rule 20 (_expr -> _expr * _expr .)
    POOL            reduce using rule 20 (_expr -> _expr * _expr .)
    ELSE            reduce using rule 20 (_expr -> _expr * _expr .)
    ,               reduce using rule 20 (_expr -> _expr * _expr .)
    IN              reduce using rule 20 (_expr -> _expr * _expr .)
    FI              reduce using rule 20 (_expr -> _expr * _expr .)
    .               shift and go to state 55
    @               shift and go to state 56


state 75

    (21) _expr -> _expr - _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 21 (_expr -> _expr - _expr .)
    LE              reduce using rule 21 (_expr -> _expr - _expr .)
    <               reduce using rule 21 (_expr -> _expr - _expr .)
    -               reduce using rule 21 (_expr -> _expr - _expr .)
    +               reduce using rule 21 (_expr -> _expr - _expr .)
    ASSIGN          reduce using rule 21 (_expr -> _expr - _expr .)
    ;               reduce using rule 21 (_expr -> _expr - _expr .)
    }               reduce using rule 21 (_expr -> _expr - _expr .)
    )               reduce using rule 21 (_expr -> _expr - _expr .)
    LOOP            reduce using rule 21 (_expr -> _expr - _expr .)
    THEN            reduce using rule 21 (_expr -> _expr - _expr .)
    OF              reduce using rule 21 (_expr -> _expr - _expr .)
    POOL            reduce using rule 21 (_expr -> _expr - _expr .)
    ELSE            reduce using rule 21 (_expr -> _expr - _expr .)
    ,               reduce using rule 21 (_expr -> _expr - _expr .)
    IN              reduce using rule 21 (_expr -> _expr - _expr .)
    FI              reduce using rule 21 (_expr -> _expr - _expr .)
    /               shift and go to state 51
    *               shift and go to state 52
    .               shift and go to state 55
    @               shift and go to state 56


state 76

    (22) _expr -> _expr + _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 22 (_expr -> _expr + _expr .)
    LE              reduce using rule 22 (_expr -> _expr + _expr .)
    <               reduce using rule 22 (_expr -> _expr + _expr .)
    -               reduce using rule 22 (_expr -> _expr + _expr .)
    +               reduce using rule 22 (_expr -> _expr + _expr .)
    ASSIGN          reduce using rule 22 (_expr -> _expr + _expr .)
    ;               reduce using rule 22 (_expr -> _expr + _expr .)
    }               reduce using rule 22 (_expr -> _expr + _expr .)
    )               reduce using rule 22 (_expr -> _expr + _expr .)
    LOOP            reduce using rule 22 (_expr -> _expr + _expr .)
    THEN            reduce using rule 22 (_expr -> _expr + _expr .)
    OF              reduce using rule 22 (_expr -> _expr + _expr .)
    POOL            reduce using rule 22 (_expr -> _expr + _expr .)
    ELSE            reduce using rule 22 (_expr -> _expr + _expr .)
    ,               reduce using rule 22 (_expr -> _expr + _expr .)
    IN              reduce using rule 22 (_expr -> _expr + _expr .)
    FI              reduce using rule 22 (_expr -> _expr + _expr .)
    /               shift and go to state 51
    *               shift and go to state 52
    .               shift and go to state 55
    @               shift and go to state 56


state 77

    (37) _expr -> _expr . OBJECTID . ( _expr_list )
    (               shift and go to state 87


state 78

    (38) _expr -> _expr @ TYPEID . . OBJECTID ( _expr_list )
    .               shift and go to state 88


state 79

    (15) _expr -> ( _expr ) .
    =               reduce using rule 15 (_expr -> ( _expr ) .)
    LE              reduce using rule 15 (_expr -> ( _expr ) .)
    <               reduce using rule 15 (_expr -> ( _expr ) .)
    /               reduce using rule 15 (_expr -> ( _expr ) .)
    *               reduce using rule 15 (_expr -> ( _expr ) .)
    -               reduce using rule 15 (_expr -> ( _expr ) .)
    +               reduce using rule 15 (_expr -> ( _expr ) .)
    .               reduce using rule 15 (_expr -> ( _expr ) .)
    @               reduce using rule 15 (_expr -> ( _expr ) .)
    ASSIGN          reduce using rule 15 (_expr -> ( _expr ) .)
    ;               reduce using rule 15 (_expr -> ( _expr ) .)
    }               reduce using rule 15 (_expr -> ( _expr ) .)
    )               reduce using rule 15 (_expr -> ( _expr ) .)
    LOOP            reduce using rule 15 (_expr -> ( _expr ) .)
    THEN            reduce using rule 15 (_expr -> ( _expr ) .)
    OF              reduce using rule 15 (_expr -> ( _expr ) .)
    POOL            reduce using rule 15 (_expr -> ( _expr ) .)
    ELSE            reduce using rule 15 (_expr -> ( _expr ) .)
    ,               reduce using rule 15 (_expr -> ( _expr ) .)
    IN              reduce using rule 15 (_expr -> ( _expr ) .)
    FI              reduce using rule 15 (_expr -> ( _expr ) .)


state 80

    (30) _expr -> { _expr ; . _expr ; }
    (43) expresion_block -> _expr ; . expresion_block
    (44) expresion_block -> _expr ; .
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (43) expresion_block -> . _expr ; expresion_block
    (44) expresion_block -> . _expr ;
    }               reduce using rule 44 (expresion_block -> _expr ; .)
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 89
    expresion_block                shift and go to state 90

state 81

    (42) _expr -> { expresion_block } .
    =               reduce using rule 42 (_expr -> { expresion_block } .)
    LE              reduce using rule 42 (_expr -> { expresion_block } .)
    <               reduce using rule 42 (_expr -> { expresion_block } .)
    /               reduce using rule 42 (_expr -> { expresion_block } .)
    *               reduce using rule 42 (_expr -> { expresion_block } .)
    -               reduce using rule 42 (_expr -> { expresion_block } .)
    +               reduce using rule 42 (_expr -> { expresion_block } .)
    .               reduce using rule 42 (_expr -> { expresion_block } .)
    @               reduce using rule 42 (_expr -> { expresion_block } .)
    ASSIGN          reduce using rule 42 (_expr -> { expresion_block } .)
    ;               reduce using rule 42 (_expr -> { expresion_block } .)
    }               reduce using rule 42 (_expr -> { expresion_block } .)
    )               reduce using rule 42 (_expr -> { expresion_block } .)
    LOOP            reduce using rule 42 (_expr -> { expresion_block } .)
    THEN            reduce using rule 42 (_expr -> { expresion_block } .)
    OF              reduce using rule 42 (_expr -> { expresion_block } .)
    POOL            reduce using rule 42 (_expr -> { expresion_block } .)
    ELSE            reduce using rule 42 (_expr -> { expresion_block } .)
    ,               reduce using rule 42 (_expr -> { expresion_block } .)
    IN              reduce using rule 42 (_expr -> { expresion_block } .)
    FI              reduce using rule 42 (_expr -> { expresion_block } .)


state 82

    (31) _expr -> LET OBJECTID : . TYPEID , _listalet
    (32) _expr -> LET OBJECTID : . TYPEID ASSIGN _expr , _listalet
    (33) _expr -> LET OBJECTID : . TYPEID IN _expr
    (34) _expr -> LET OBJECTID : . TYPEID ASSIGN _expr IN _expr
    TYPEID          shift and go to state 91


state 83

    (35) _expr -> WHILE _expr LOOP . _expr POOL
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 92

state 84

    (36) _expr -> IF _expr THEN . _expr ELSE _expr FI
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 93

state 85

    (40) _expr -> CASE _expr OF . _lista_case + ESAC
    (49) _lista_case -> .
    (50) _lista_case -> . _rama_case ; _lista_case
    (48) _rama_case -> . OBJECTID : TYPEID DARROW _expr
    +               reduce using rule 49 (_lista_case -> .)
    OBJECTID        shift and go to state 96

    _lista_case                    shift and go to state 94
    _rama_case                     shift and go to state 95

state 86

    (10) _feature -> OBJECTID ( _formal_list ) : TYPEID { . _expr }
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 97

state 87

    (37) _expr -> _expr . OBJECTID ( . _expr_list )
    (45) _expr_list -> .
    (46) _expr_list -> . _expr
    (47) _expr_list -> . _expr , _expr_list
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    )               reduce using rule 45 (_expr_list -> .)
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 98
    _expr_list                     shift and go to state 99

state 88

    (38) _expr -> _expr @ TYPEID . . OBJECTID ( _expr_list )
    OBJECTID        shift and go to state 100


state 89

    (30) _expr -> { _expr ; _expr . ; }
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    (43) expresion_block -> _expr . ; expresion_block
    (44) expresion_block -> _expr . ;
    ;               shift and go to state 101
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 90

    (43) expresion_block -> _expr ; expresion_block .
    }               reduce using rule 43 (expresion_block -> _expr ; expresion_block .)


state 91

    (31) _expr -> LET OBJECTID : TYPEID . , _listalet
    (32) _expr -> LET OBJECTID : TYPEID . ASSIGN _expr , _listalet
    (33) _expr -> LET OBJECTID : TYPEID . IN _expr
    (34) _expr -> LET OBJECTID : TYPEID . ASSIGN _expr IN _expr
    ,               shift and go to state 102
    ASSIGN          shift and go to state 103
    IN              shift and go to state 104


state 92

    (35) _expr -> WHILE _expr LOOP _expr . POOL
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    POOL            shift and go to state 105
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 93

    (36) _expr -> IF _expr THEN _expr . ELSE _expr FI
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    ELSE            shift and go to state 106
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 94

    (40) _expr -> CASE _expr OF _lista_case . + ESAC
    +               shift and go to state 107


state 95

    (50) _lista_case -> _rama_case . ; _lista_case
    ;               shift and go to state 108


state 96

    (48) _rama_case -> OBJECTID . : TYPEID DARROW _expr
    :               shift and go to state 109


state 97

    (10) _feature -> OBJECTID ( _formal_list ) : TYPEID { _expr . }
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    }               shift and go to state 110
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 98

    (46) _expr_list -> _expr .
    (47) _expr_list -> _expr . , _expr_list
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    )               reduce using rule 46 (_expr_list -> _expr .)
    ,               shift and go to state 111
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 99

    (37) _expr -> _expr . OBJECTID ( _expr_list . )
    )               shift and go to state 112


state 100

    (38) _expr -> _expr @ TYPEID . OBJECTID . ( _expr_list )
    (               shift and go to state 113


state 101

    (30) _expr -> { _expr ; _expr ; . }
    (43) expresion_block -> _expr ; . expresion_block
    (44) expresion_block -> _expr ; .
    (43) expresion_block -> . _expr ; expresion_block
    (44) expresion_block -> . _expr ;
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 115
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 114
    expresion_block                shift and go to state 90

state 102

    (31) _expr -> LET OBJECTID : TYPEID , . _listalet
    (51) _listalet -> . OBJECTID : TYPEID IN _expr
    (52) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (53) _listalet -> . OBJECTID : TYPEID , _listalet
    (54) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 116

    _listalet                      shift and go to state 117

state 103

    (32) _expr -> LET OBJECTID : TYPEID ASSIGN . _expr , _listalet
    (34) _expr -> LET OBJECTID : TYPEID ASSIGN . _expr IN _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 118

state 104

    (33) _expr -> LET OBJECTID : TYPEID IN . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 119

state 105

    (35) _expr -> WHILE _expr LOOP _expr POOL .
    =               reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    LE              reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    <               reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    /               reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    *               reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    -               reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    +               reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    .               reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    @               reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    ASSIGN          reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    ;               reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    }               reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    )               reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    LOOP            reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    THEN            reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    OF              reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    POOL            reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    ELSE            reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    ,               reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    IN              reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)
    FI              reduce using rule 35 (_expr -> WHILE _expr LOOP _expr POOL .)


state 106

    (36) _expr -> IF _expr THEN _expr ELSE . _expr FI
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 120

state 107

    (40) _expr -> CASE _expr OF _lista_case + . ESAC
    ESAC            shift and go to state 121


state 108

    (50) _lista_case -> _rama_case ; . _lista_case
    (49) _lista_case -> .
    (50) _lista_case -> . _rama_case ; _lista_case
    (48) _rama_case -> . OBJECTID : TYPEID DARROW _expr
    +               reduce using rule 49 (_lista_case -> .)
    OBJECTID        shift and go to state 96

    _rama_case                     shift and go to state 95
    _lista_case                    shift and go to state 122

state 109

    (48) _rama_case -> OBJECTID : . TYPEID DARROW _expr
    TYPEID          shift and go to state 123


state 110

    (10) _feature -> OBJECTID ( _formal_list ) : TYPEID { _expr } .
    ;               reduce using rule 10 (_feature -> OBJECTID ( _formal_list ) : TYPEID { _expr } .)
    }               reduce using rule 10 (_feature -> OBJECTID ( _formal_list ) : TYPEID { _expr } .)


state 111

    (47) _expr_list -> _expr , . _expr_list
    (45) _expr_list -> .
    (46) _expr_list -> . _expr
    (47) _expr_list -> . _expr , _expr_list
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    )               reduce using rule 45 (_expr_list -> .)
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 98
    _expr_list                     shift and go to state 124

state 112

    (37) _expr -> _expr . OBJECTID ( _expr_list ) .
    =               reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    LE              reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    <               reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    /               reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    *               reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    -               reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    +               reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    .               reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    @               reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    ASSIGN          reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    ;               reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    }               reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    )               reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    LOOP            reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    THEN            reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    OF              reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    POOL            reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    ELSE            reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    ,               reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    IN              reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    FI              reduce using rule 37 (_expr -> _expr . OBJECTID ( _expr_list ) .)


state 113

    (38) _expr -> _expr @ TYPEID . OBJECTID ( . _expr_list )
    (45) _expr_list -> .
    (46) _expr_list -> . _expr
    (47) _expr_list -> . _expr , _expr_list
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    )               reduce using rule 45 (_expr_list -> .)
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 98
    _expr_list                     shift and go to state 125

state 114

    (43) expresion_block -> _expr . ; expresion_block
    (44) expresion_block -> _expr . ;
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    ;               shift and go to state 126
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 115

    (30) _expr -> { _expr ; _expr ; } .
    =               reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    LE              reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    <               reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    /               reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    *               reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    -               reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    +               reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    .               reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    @               reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    ASSIGN          reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    ;               reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    }               reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    )               reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    LOOP            reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    THEN            reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    OF              reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    POOL            reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    ELSE            reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    ,               reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    IN              reduce using rule 30 (_expr -> { _expr ; _expr ; } .)
    FI              reduce using rule 30 (_expr -> { _expr ; _expr ; } .)


state 116

    (51) _listalet -> OBJECTID . : TYPEID IN _expr
    (52) _listalet -> OBJECTID . : TYPEID ASSIGN _expr IN _expr
    (53) _listalet -> OBJECTID . : TYPEID , _listalet
    (54) _listalet -> OBJECTID . : TYPEID ASSIGN _expr , _listalet
    :               shift and go to state 127


state 117

    (31) _expr -> LET OBJECTID : TYPEID , _listalet .
    =               reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    LE              reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    <               reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    /               reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    *               reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    -               reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    +               reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    .               reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    @               reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    ASSIGN          reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    ;               reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    }               reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    )               reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    LOOP            reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    THEN            reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    OF              reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    POOL            reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    ELSE            reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    ,               reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    IN              reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    FI              reduce using rule 31 (_expr -> LET OBJECTID : TYPEID , _listalet .)


state 118

    (32) _expr -> LET OBJECTID : TYPEID ASSIGN _expr . , _listalet
    (34) _expr -> LET OBJECTID : TYPEID ASSIGN _expr . IN _expr
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    ,               shift and go to state 128
    IN              shift and go to state 129
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 119

    (33) _expr -> LET OBJECTID : TYPEID IN _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    ;               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    }               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    )               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    LOOP            reduce using rule 33 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    THEN            reduce using rule 33 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    OF              reduce using rule 33 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    POOL            reduce using rule 33 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    ELSE            reduce using rule 33 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    ,               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    IN              reduce using rule 33 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    FI              reduce using rule 33 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 120

    (36) _expr -> IF _expr THEN _expr ELSE _expr . FI
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    FI              shift and go to state 130
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 121

    (40) _expr -> CASE _expr OF _lista_case + ESAC .
    =               reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    LE              reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    <               reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    /               reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    *               reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    -               reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    +               reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    .               reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    @               reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    ASSIGN          reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    ;               reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    }               reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    )               reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    LOOP            reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    THEN            reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    OF              reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    POOL            reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    ELSE            reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    ,               reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    IN              reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)
    FI              reduce using rule 40 (_expr -> CASE _expr OF _lista_case + ESAC .)


state 122

    (50) _lista_case -> _rama_case ; _lista_case .
    +               reduce using rule 50 (_lista_case -> _rama_case ; _lista_case .)


state 123

    (48) _rama_case -> OBJECTID : TYPEID . DARROW _expr
    DARROW          shift and go to state 131


state 124

    (47) _expr_list -> _expr , _expr_list .
    )               reduce using rule 47 (_expr_list -> _expr , _expr_list .)


state 125

    (38) _expr -> _expr @ TYPEID . OBJECTID ( _expr_list . )
    )               shift and go to state 132


state 126

    (43) expresion_block -> _expr ; . expresion_block
    (44) expresion_block -> _expr ; .
    (43) expresion_block -> . _expr ; expresion_block
    (44) expresion_block -> . _expr ;
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    }               reduce using rule 44 (expresion_block -> _expr ; .)
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 114
    expresion_block                shift and go to state 90

state 127

    (51) _listalet -> OBJECTID : . TYPEID IN _expr
    (52) _listalet -> OBJECTID : . TYPEID ASSIGN _expr IN _expr
    (53) _listalet -> OBJECTID : . TYPEID , _listalet
    (54) _listalet -> OBJECTID : . TYPEID ASSIGN _expr , _listalet
    TYPEID          shift and go to state 133


state 128

    (32) _expr -> LET OBJECTID : TYPEID ASSIGN _expr , . _listalet
    (51) _listalet -> . OBJECTID : TYPEID IN _expr
    (52) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (53) _listalet -> . OBJECTID : TYPEID , _listalet
    (54) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 116

    _listalet                      shift and go to state 134

state 129

    (34) _expr -> LET OBJECTID : TYPEID ASSIGN _expr IN . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 135

state 130

    (36) _expr -> IF _expr THEN _expr ELSE _expr FI .
    =               reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    LE              reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    <               reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    /               reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    *               reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    -               reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    +               reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    .               reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    @               reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    ASSIGN          reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    ;               reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    }               reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    )               reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    LOOP            reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    THEN            reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    OF              reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    POOL            reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    ELSE            reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    ,               reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    IN              reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    FI              reduce using rule 36 (_expr -> IF _expr THEN _expr ELSE _expr FI .)


state 131

    (48) _rama_case -> OBJECTID : TYPEID DARROW . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 136

state 132

    (38) _expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .
    =               reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    LE              reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    <               reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    /               reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    *               reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    -               reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    +               reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    .               reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    @               reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    ASSIGN          reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    ;               reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    }               reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    )               reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    LOOP            reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    THEN            reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    OF              reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    POOL            reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    ELSE            reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    ,               reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    IN              reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    FI              reduce using rule 38 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)


state 133

    (51) _listalet -> OBJECTID : TYPEID . IN _expr
    (52) _listalet -> OBJECTID : TYPEID . ASSIGN _expr IN _expr
    (53) _listalet -> OBJECTID : TYPEID . , _listalet
    (54) _listalet -> OBJECTID : TYPEID . ASSIGN _expr , _listalet
    IN              shift and go to state 137
    ASSIGN          shift and go to state 138
    ,               shift and go to state 139


state 134

    (32) _expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .
    =               reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    LE              reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    <               reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    /               reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    *               reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    -               reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    +               reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    .               reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    @               reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ASSIGN          reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ;               reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    }               reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    )               reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    LOOP            reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    THEN            reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    OF              reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    POOL            reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ELSE            reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ,               reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    IN              reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    FI              reduce using rule 32 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)


state 135

    (34) _expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    ;               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    }               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    )               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    LOOP            reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    THEN            reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    OF              reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    POOL            reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    ELSE            reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    ,               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    IN              reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    FI              reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 136

    (48) _rama_case -> OBJECTID : TYPEID DARROW _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    ;               reduce using rule 48 (_rama_case -> OBJECTID : TYPEID DARROW _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 137

    (51) _listalet -> OBJECTID : TYPEID IN . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 140

state 138

    (52) _listalet -> OBJECTID : TYPEID ASSIGN . _expr IN _expr
    (54) _listalet -> OBJECTID : TYPEID ASSIGN . _expr , _listalet
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 141

state 139

    (53) _listalet -> OBJECTID : TYPEID , . _listalet
    (51) _listalet -> . OBJECTID : TYPEID IN _expr
    (52) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (53) _listalet -> . OBJECTID : TYPEID , _listalet
    (54) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 116

    _listalet                      shift and go to state 142

state 140

    (51) _listalet -> OBJECTID : TYPEID IN _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    ;               reduce using rule 51 (_listalet -> OBJECTID : TYPEID IN _expr .)
    }               reduce using rule 51 (_listalet -> OBJECTID : TYPEID IN _expr .)
    )               reduce using rule 51 (_listalet -> OBJECTID : TYPEID IN _expr .)
    LOOP            reduce using rule 51 (_listalet -> OBJECTID : TYPEID IN _expr .)
    THEN            reduce using rule 51 (_listalet -> OBJECTID : TYPEID IN _expr .)
    OF              reduce using rule 51 (_listalet -> OBJECTID : TYPEID IN _expr .)
    POOL            reduce using rule 51 (_listalet -> OBJECTID : TYPEID IN _expr .)
    ELSE            reduce using rule 51 (_listalet -> OBJECTID : TYPEID IN _expr .)
    ,               reduce using rule 51 (_listalet -> OBJECTID : TYPEID IN _expr .)
    IN              reduce using rule 51 (_listalet -> OBJECTID : TYPEID IN _expr .)
    FI              reduce using rule 51 (_listalet -> OBJECTID : TYPEID IN _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 141

    (52) _listalet -> OBJECTID : TYPEID ASSIGN _expr . IN _expr
    (54) _listalet -> OBJECTID : TYPEID ASSIGN _expr . , _listalet
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
    IN              shift and go to state 143
    ,               shift and go to state 144
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 142

    (53) _listalet -> OBJECTID : TYPEID , _listalet .
    =               reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    LE              reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    <               reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    /               reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    *               reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    -               reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    +               reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    .               reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    @               reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    ASSIGN          reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    ;               reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    }               reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    )               reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    LOOP            reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    THEN            reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    OF              reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    POOL            reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    ELSE            reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    ,               reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    IN              reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)
    FI              reduce using rule 53 (_listalet -> OBJECTID : TYPEID , _listalet .)


state 143

    (52) _listalet -> OBJECTID : TYPEID ASSIGN _expr IN . _expr
    (15) _expr -> . ( _expr )
    (16) _expr -> . _expr = _expr
    (17) _expr -> . _expr LE _expr
    (18) _expr -> . _expr < _expr
    (19) _expr -> . _expr / _expr
    (20) _expr -> . _expr * _expr
    (21) _expr -> . _expr - _expr
    (22) _expr -> . _expr + _expr
    (23) _expr -> . BOOL_CONST
    (24) _expr -> . STR_CONST
    (25) _expr -> . INT_CONST
    (26) _expr -> . OBJECTID
    (27) _expr -> . ISVOID _expr
    (28) _expr -> . NOT _expr
    (29) _expr -> . ~ _expr
    (30) _expr -> . { _expr ; _expr ; }
    (31) _expr -> . LET OBJECTID : TYPEID , _listalet
    (32) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (33) _expr -> . LET OBJECTID : TYPEID IN _expr
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (35) _expr -> . WHILE _expr LOOP _expr POOL
    (36) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (37) _expr -> . _expr . OBJECTID ( _expr_list )
    (38) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> . _expr ASSIGN _expr
    (40) _expr -> . CASE _expr OF _lista_case + ESAC
    (41) _expr -> . NEW OBJECTID
    (42) _expr -> . { expresion_block }
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 145

state 144

    (54) _listalet -> OBJECTID : TYPEID ASSIGN _expr , . _listalet
    (51) _listalet -> . OBJECTID : TYPEID IN _expr
    (52) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (53) _listalet -> . OBJECTID : TYPEID , _listalet
    (54) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 116

    _listalet                      shift and go to state 146

state 145

    (52) _listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .
    (16) _expr -> _expr . = _expr
    (17) _expr -> _expr . LE _expr
    (18) _expr -> _expr . < _expr
    (19) _expr -> _expr . / _expr
    (20) _expr -> _expr . * _expr
    (21) _expr -> _expr . - _expr
    (22) _expr -> _expr . + _expr
    (37) _expr -> _expr . . OBJECTID ( _expr_list )
    (38) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (39) _expr -> _expr . ASSIGN _expr
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    ;               reduce using rule 52 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    }               reduce using rule 52 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    )               reduce using rule 52 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    LOOP            reduce using rule 52 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    THEN            reduce using rule 52 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    OF              reduce using rule 52 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    POOL            reduce using rule 52 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    ELSE            reduce using rule 52 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    ,               reduce using rule 52 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    IN              reduce using rule 52 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    FI              reduce using rule 52 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 146

    (54) _listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .
    =               reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    LE              reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    <               reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    /               reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    *               reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    -               reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    +               reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    .               reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    @               reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ASSIGN          reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ;               reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    }               reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    )               reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    LOOP            reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    THEN            reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    OF              reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    POOL            reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ELSE            reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ,               reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    IN              reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    FI              reduce using rule 54 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)


Conflicts:

shift/reduce conflict for } in state 101 resolved as shift
shift/reduce conflict for = in state 119 resolved as shift
shift/reduce conflict for LE in state 119 resolved as shift
shift/reduce conflict for < in state 119 resolved as shift
shift/reduce conflict for / in state 119 resolved as shift
shift/reduce conflict for * in state 119 resolved as shift
shift/reduce conflict for - in state 119 resolved as shift
shift/reduce conflict for + in state 119 resolved as shift
shift/reduce conflict for . in state 119 resolved as shift
shift/reduce conflict for @ in state 119 resolved as shift
shift/reduce conflict for ASSIGN in state 119 resolved as shift
shift/reduce conflict for = in state 135 resolved as shift
shift/reduce conflict for LE in state 135 resolved as shift
shift/reduce conflict for < in state 135 resolved as shift
shift/reduce conflict for / in state 135 resolved as shift
shift/reduce conflict for * in state 135 resolved as shift
shift/reduce conflict for - in state 135 resolved as shift
shift/reduce conflict for + in state 135 resolved as shift
shift/reduce conflict for . in state 135 resolved as shift
shift/reduce conflict for @ in state 135 resolved as shift
shift/reduce conflict for ASSIGN in state 135 resolved as shift
shift/reduce conflict for = in state 140 resolved as shift
shift/reduce conflict for LE in state 140 resolved as shift
shift/reduce conflict for < in state 140 resolved as shift
shift/reduce conflict for / in state 140 resolved as shift
shift/reduce conflict for * in state 140 resolved as shift
shift/reduce conflict for - in state 140 resolved as shift
shift/reduce conflict for + in state 140 resolved as shift
shift/reduce conflict for . in state 140 resolved as shift
shift/reduce conflict for @ in state 140 resolved as shift
shift/reduce conflict for ASSIGN in state 140 resolved as shift
shift/reduce conflict for = in state 145 resolved as shift
shift/reduce conflict for LE in state 145 resolved as shift
shift/reduce conflict for < in state 145 resolved as shift
shift/reduce conflict for / in state 145 resolved as shift
shift/reduce conflict for * in state 145 resolved as shift
shift/reduce conflict for - in state 145 resolved as shift
shift/reduce conflict for + in state 145 resolved as shift
shift/reduce conflict for . in state 145 resolved as shift
shift/reduce conflict for @ in state 145 resolved as shift
shift/reduce conflict for ASSIGN in state 145 resolved as shift