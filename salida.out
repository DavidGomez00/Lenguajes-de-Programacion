Grammar:

Rule 0     S' -> _program
Rule 1     _program -> _class ; _program
Rule 2     _program -> _class ;
Rule 3     _class -> CLASS TYPEID INHERITS TYPEID { _feature_list }
Rule 4     _class -> CLASS TYPEID { _feature_list }
Rule 5     _feature_list -> <empty>
Rule 6     _feature_list -> _feature ; _feature_list
Rule 7     _feature -> OBJECTID : TYPEID
Rule 8     _feature -> OBJECTID : TYPEID ASSIGN _expr  [precedence=left, level=1]
Rule 9     _feature -> OBJECTID ( _formal_list ) : TYPEID { _expr }
Rule 10    _formal_list -> <empty>
Rule 11    _formal_list -> _formal
Rule 12    _formal_list -> _formal , _formal_list
Rule 13    _formal -> OBJECTID : TYPEID
Rule 14    _expr_list -> <empty>
Rule 15    _expr_list -> _expr
Rule 16    _expr_list -> _expr , _expr_list
Rule 17    _expr -> ( _expr )
Rule 18    _expr -> _expr = _expr  [precedence=left, level=3]
Rule 19    _expr -> _expr LE _expr  [precedence=left, level=3]
Rule 20    _expr -> _expr < _expr  [precedence=left, level=3]
Rule 21    _expr -> _expr / _expr
Rule 22    _expr -> _expr * _expr
Rule 23    _expr -> _expr - _expr  [precedence=left, level=4]
Rule 24    _expr -> _expr + _expr  [precedence=left, level=4]
Rule 25    _expr -> BOOL_CONST
Rule 26    _expr -> STR_CONST
Rule 27    _expr -> INT_CONST
Rule 28    _expr -> OBJECTID
Rule 29    _expr -> ISVOID _expr  [precedence=left, level=5]
Rule 30    _expr -> NOT _expr  [precedence=left, level=2]
Rule 31    _expr -> ~ _expr  [precedence=left, level=6]
Rule 32    _expr -> { _expr ; _expr ; }
Rule 33    _expr -> LET OBJECTID : TYPEID , _listalet
Rule 34    _expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet
Rule 35    _expr -> LET OBJECTID : TYPEID IN _expr
Rule 36    _expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr
Rule 37    _expr -> WHILE _expr LOOP _expr POOL
Rule 38    _expr -> IF _expr THEN _expr ELSE _expr FI
Rule 39    _expr -> _expr . OBJECTID ( _expr_list )
Rule 40    _expr -> _expr @ TYPEID . OBJECTID ( _expr_list )
Rule 41    _expr -> _expr ASSIGN _expr  [precedence=left, level=1]
Rule 42    _expr -> CASE _expr OF _lista_case + ESAC
Rule 43    _expr -> NEW OBJECTID
Rule 44    _rama_case -> OBJECTID : TYPEID DARROW _expr
Rule 45    _lista_case -> <empty>
Rule 46    _lista_case -> _rama_case ; _lista_case
Rule 47    _listalet -> OBJECTID : TYPEID IN _expr
Rule 48    _listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr
Rule 49    _listalet -> OBJECTID : TYPEID , _listalet
Rule 50    _listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet

Unused terminals:

    ERROR

Terminals, with rules where they appear:

(                    : 9 17 39 40
)                    : 9 17 39 40
*                    : 22
+                    : 24 42
,                    : 12 16 33 34 49 50
-                    : 23
.                    : 39 40
/                    : 21
:                    : 7 8 9 13 33 34 35 36 44 47 48 49 50
;                    : 1 2 6 32 32 46
<                    : 20
=                    : 18
@                    : 40
ASSIGN               : 8 34 36 41 48 50
BOOL_CONST           : 25
CASE                 : 42
CLASS                : 3 4
DARROW               : 44
ELSE                 : 38
ERROR                : 
ESAC                 : 42
FI                   : 38
IF                   : 38
IN                   : 35 36 47 48
INHERITS             : 3
INT_CONST            : 27
ISVOID               : 29
LE                   : 19
LET                  : 33 34 35 36
LOOP                 : 37
NEW                  : 43
NOT                  : 30
OBJECTID             : 7 8 9 13 28 33 34 35 36 39 40 43 44 47 48 49 50
OF                   : 42
POOL                 : 37
STR_CONST            : 26
THEN                 : 38
TYPEID               : 3 3 4 7 8 9 13 33 34 35 36 40 44 47 48 49 50
WHILE                : 37
error                : 
{                    : 3 4 9 32
}                    : 3 4 9 32
~                    : 31

Nonterminals, with rules where they appear:

_class               : 1 2
_expr                : 8 9 15 16 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 29 30 31 32 32 34 35 36 36 37 37 38 38 38 39 40 41 41 42 44 47 48 48 50
_expr_list           : 16 39 40
_feature             : 6
_feature_list        : 3 4 6
_formal              : 11 12
_formal_list         : 9 12
_lista_case          : 42 46
_listalet            : 33 34 49 50
_program             : 1 0
_rama_case           : 46


state 0

    (0) S' -> . _program
    (1) _program -> . _class ; _program
    (2) _program -> . _class ;
    (3) _class -> . CLASS TYPEID INHERITS TYPEID { _feature_list }
    (4) _class -> . CLASS TYPEID { _feature_list }
    CLASS           shift and go to state 3

    _program                       shift and go to state 1
    _class                         shift and go to state 2

state 1

    (0) S' -> _program .


state 2

    (1) _program -> _class . ; _program
    (2) _program -> _class . ;
    ;               shift and go to state 4


state 3

    (3) _class -> CLASS . TYPEID INHERITS TYPEID { _feature_list }
    (4) _class -> CLASS . TYPEID { _feature_list }
    TYPEID          shift and go to state 5


state 4

    (1) _program -> _class ; . _program
    (2) _program -> _class ; .
    (1) _program -> . _class ; _program
    (2) _program -> . _class ;
    (3) _class -> . CLASS TYPEID INHERITS TYPEID { _feature_list }
    (4) _class -> . CLASS TYPEID { _feature_list }
    $end            reduce using rule 2 (_program -> _class ; .)
    CLASS           shift and go to state 3

    _class                         shift and go to state 2
    _program                       shift and go to state 6

state 5

    (3) _class -> CLASS TYPEID . INHERITS TYPEID { _feature_list }
    (4) _class -> CLASS TYPEID . { _feature_list }
    INHERITS        shift and go to state 7
    {               shift and go to state 8


state 6

    (1) _program -> _class ; _program .
    $end            reduce using rule 1 (_program -> _class ; _program .)


state 7

    (3) _class -> CLASS TYPEID INHERITS . TYPEID { _feature_list }
    TYPEID          shift and go to state 9


state 8

    (4) _class -> CLASS TYPEID { . _feature_list }
    (5) _feature_list -> .
    (6) _feature_list -> . _feature ; _feature_list
    (7) _feature -> . OBJECTID : TYPEID
    (8) _feature -> . OBJECTID : TYPEID ASSIGN _expr
    (9) _feature -> . OBJECTID ( _formal_list ) : TYPEID { _expr }
    }               reduce using rule 5 (_feature_list -> .)
    OBJECTID        shift and go to state 12

    _feature_list                  shift and go to state 10
    _feature                       shift and go to state 11

state 9

    (3) _class -> CLASS TYPEID INHERITS TYPEID . { _feature_list }
    {               shift and go to state 13


state 10

    (4) _class -> CLASS TYPEID { _feature_list . }
    }               shift and go to state 14


state 11

    (6) _feature_list -> _feature . ; _feature_list
    ;               shift and go to state 15


state 12

    (7) _feature -> OBJECTID . : TYPEID
    (8) _feature -> OBJECTID . : TYPEID ASSIGN _expr
    (9) _feature -> OBJECTID . ( _formal_list ) : TYPEID { _expr }
    :               shift and go to state 16
    (               shift and go to state 17


state 13

    (3) _class -> CLASS TYPEID INHERITS TYPEID { . _feature_list }
    (5) _feature_list -> .
    (6) _feature_list -> . _feature ; _feature_list
    (7) _feature -> . OBJECTID : TYPEID
    (8) _feature -> . OBJECTID : TYPEID ASSIGN _expr
    (9) _feature -> . OBJECTID ( _formal_list ) : TYPEID { _expr }
    }               reduce using rule 5 (_feature_list -> .)
    OBJECTID        shift and go to state 12

    _feature_list                  shift and go to state 18
    _feature                       shift and go to state 11

state 14

    (4) _class -> CLASS TYPEID { _feature_list } .
    ;               reduce using rule 4 (_class -> CLASS TYPEID { _feature_list } .)


state 15

    (6) _feature_list -> _feature ; . _feature_list
    (5) _feature_list -> .
    (6) _feature_list -> . _feature ; _feature_list
    (7) _feature -> . OBJECTID : TYPEID
    (8) _feature -> . OBJECTID : TYPEID ASSIGN _expr
    (9) _feature -> . OBJECTID ( _formal_list ) : TYPEID { _expr }
    }               reduce using rule 5 (_feature_list -> .)
    OBJECTID        shift and go to state 12

    _feature                       shift and go to state 11
    _feature_list                  shift and go to state 19

state 16

    (7) _feature -> OBJECTID : . TYPEID
    (8) _feature -> OBJECTID : . TYPEID ASSIGN _expr
    TYPEID          shift and go to state 20


state 17

    (9) _feature -> OBJECTID ( . _formal_list ) : TYPEID { _expr }
    (10) _formal_list -> .
    (11) _formal_list -> . _formal
    (12) _formal_list -> . _formal , _formal_list
    (13) _formal -> . OBJECTID : TYPEID
    )               reduce using rule 10 (_formal_list -> .)
    OBJECTID        shift and go to state 21

    _formal_list                   shift and go to state 22
    _formal                        shift and go to state 23

state 18

    (3) _class -> CLASS TYPEID INHERITS TYPEID { _feature_list . }
    }               shift and go to state 24


state 19

    (6) _feature_list -> _feature ; _feature_list .
    }               reduce using rule 6 (_feature_list -> _feature ; _feature_list .)


state 20

    (7) _feature -> OBJECTID : TYPEID .
    (8) _feature -> OBJECTID : TYPEID . ASSIGN _expr
    ;               reduce using rule 7 (_feature -> OBJECTID : TYPEID .)
    ASSIGN          shift and go to state 25


state 21

    (13) _formal -> OBJECTID . : TYPEID
    :               shift and go to state 26


state 22

    (9) _feature -> OBJECTID ( _formal_list . ) : TYPEID { _expr }
    )               shift and go to state 27


state 23

    (11) _formal_list -> _formal .
    (12) _formal_list -> _formal . , _formal_list
    )               reduce using rule 11 (_formal_list -> _formal .)
    ,               shift and go to state 28


state 24

    (3) _class -> CLASS TYPEID INHERITS TYPEID { _feature_list } .
    ;               reduce using rule 3 (_class -> CLASS TYPEID INHERITS TYPEID { _feature_list } .)


state 25

    (8) _feature -> OBJECTID : TYPEID ASSIGN . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 30

state 26

    (13) _formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 44


state 27

    (9) _feature -> OBJECTID ( _formal_list ) . : TYPEID { _expr }
    :               shift and go to state 45


state 28

    (12) _formal_list -> _formal , . _formal_list
    (10) _formal_list -> .
    (11) _formal_list -> . _formal
    (12) _formal_list -> . _formal , _formal_list
    (13) _formal -> . OBJECTID : TYPEID
    )               reduce using rule 10 (_formal_list -> .)
    OBJECTID        shift and go to state 21

    _formal                        shift and go to state 23
    _formal_list                   shift and go to state 46

state 29

    (28) _expr -> OBJECTID .
    =               reduce using rule 28 (_expr -> OBJECTID .)
    LE              reduce using rule 28 (_expr -> OBJECTID .)
    <               reduce using rule 28 (_expr -> OBJECTID .)
    /               reduce using rule 28 (_expr -> OBJECTID .)
    *               reduce using rule 28 (_expr -> OBJECTID .)
    -               reduce using rule 28 (_expr -> OBJECTID .)
    +               reduce using rule 28 (_expr -> OBJECTID .)
    .               reduce using rule 28 (_expr -> OBJECTID .)
    @               reduce using rule 28 (_expr -> OBJECTID .)
    ASSIGN          reduce using rule 28 (_expr -> OBJECTID .)
    ;               reduce using rule 28 (_expr -> OBJECTID .)
    )               reduce using rule 28 (_expr -> OBJECTID .)
    LOOP            reduce using rule 28 (_expr -> OBJECTID .)
    THEN            reduce using rule 28 (_expr -> OBJECTID .)
    OF              reduce using rule 28 (_expr -> OBJECTID .)
    POOL            reduce using rule 28 (_expr -> OBJECTID .)
    ELSE            reduce using rule 28 (_expr -> OBJECTID .)
    }               reduce using rule 28 (_expr -> OBJECTID .)
    ,               reduce using rule 28 (_expr -> OBJECTID .)
    IN              reduce using rule 28 (_expr -> OBJECTID .)
    FI              reduce using rule 28 (_expr -> OBJECTID .)


state 30

    (8) _feature -> OBJECTID : TYPEID ASSIGN _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    ;               reduce using rule 8 (_feature -> OBJECTID : TYPEID ASSIGN _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 31

    (17) _expr -> ( . _expr )
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 57

state 32

    (25) _expr -> BOOL_CONST .
    =               reduce using rule 25 (_expr -> BOOL_CONST .)
    LE              reduce using rule 25 (_expr -> BOOL_CONST .)
    <               reduce using rule 25 (_expr -> BOOL_CONST .)
    /               reduce using rule 25 (_expr -> BOOL_CONST .)
    *               reduce using rule 25 (_expr -> BOOL_CONST .)
    -               reduce using rule 25 (_expr -> BOOL_CONST .)
    +               reduce using rule 25 (_expr -> BOOL_CONST .)
    .               reduce using rule 25 (_expr -> BOOL_CONST .)
    @               reduce using rule 25 (_expr -> BOOL_CONST .)
    ASSIGN          reduce using rule 25 (_expr -> BOOL_CONST .)
    ;               reduce using rule 25 (_expr -> BOOL_CONST .)
    )               reduce using rule 25 (_expr -> BOOL_CONST .)
    LOOP            reduce using rule 25 (_expr -> BOOL_CONST .)
    THEN            reduce using rule 25 (_expr -> BOOL_CONST .)
    OF              reduce using rule 25 (_expr -> BOOL_CONST .)
    POOL            reduce using rule 25 (_expr -> BOOL_CONST .)
    ELSE            reduce using rule 25 (_expr -> BOOL_CONST .)
    }               reduce using rule 25 (_expr -> BOOL_CONST .)
    ,               reduce using rule 25 (_expr -> BOOL_CONST .)
    IN              reduce using rule 25 (_expr -> BOOL_CONST .)
    FI              reduce using rule 25 (_expr -> BOOL_CONST .)


state 33

    (26) _expr -> STR_CONST .
    =               reduce using rule 26 (_expr -> STR_CONST .)
    LE              reduce using rule 26 (_expr -> STR_CONST .)
    <               reduce using rule 26 (_expr -> STR_CONST .)
    /               reduce using rule 26 (_expr -> STR_CONST .)
    *               reduce using rule 26 (_expr -> STR_CONST .)
    -               reduce using rule 26 (_expr -> STR_CONST .)
    +               reduce using rule 26 (_expr -> STR_CONST .)
    .               reduce using rule 26 (_expr -> STR_CONST .)
    @               reduce using rule 26 (_expr -> STR_CONST .)
    ASSIGN          reduce using rule 26 (_expr -> STR_CONST .)
    ;               reduce using rule 26 (_expr -> STR_CONST .)
    )               reduce using rule 26 (_expr -> STR_CONST .)
    LOOP            reduce using rule 26 (_expr -> STR_CONST .)
    THEN            reduce using rule 26 (_expr -> STR_CONST .)
    OF              reduce using rule 26 (_expr -> STR_CONST .)
    POOL            reduce using rule 26 (_expr -> STR_CONST .)
    ELSE            reduce using rule 26 (_expr -> STR_CONST .)
    }               reduce using rule 26 (_expr -> STR_CONST .)
    ,               reduce using rule 26 (_expr -> STR_CONST .)
    IN              reduce using rule 26 (_expr -> STR_CONST .)
    FI              reduce using rule 26 (_expr -> STR_CONST .)


state 34

    (27) _expr -> INT_CONST .
    =               reduce using rule 27 (_expr -> INT_CONST .)
    LE              reduce using rule 27 (_expr -> INT_CONST .)
    <               reduce using rule 27 (_expr -> INT_CONST .)
    /               reduce using rule 27 (_expr -> INT_CONST .)
    *               reduce using rule 27 (_expr -> INT_CONST .)
    -               reduce using rule 27 (_expr -> INT_CONST .)
    +               reduce using rule 27 (_expr -> INT_CONST .)
    .               reduce using rule 27 (_expr -> INT_CONST .)
    @               reduce using rule 27 (_expr -> INT_CONST .)
    ASSIGN          reduce using rule 27 (_expr -> INT_CONST .)
    ;               reduce using rule 27 (_expr -> INT_CONST .)
    )               reduce using rule 27 (_expr -> INT_CONST .)
    LOOP            reduce using rule 27 (_expr -> INT_CONST .)
    THEN            reduce using rule 27 (_expr -> INT_CONST .)
    OF              reduce using rule 27 (_expr -> INT_CONST .)
    POOL            reduce using rule 27 (_expr -> INT_CONST .)
    ELSE            reduce using rule 27 (_expr -> INT_CONST .)
    }               reduce using rule 27 (_expr -> INT_CONST .)
    ,               reduce using rule 27 (_expr -> INT_CONST .)
    IN              reduce using rule 27 (_expr -> INT_CONST .)
    FI              reduce using rule 27 (_expr -> INT_CONST .)


state 35

    (29) _expr -> ISVOID . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 58

state 36

    (30) _expr -> NOT . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 59

state 37

    (31) _expr -> ~ . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 60

state 38

    (32) _expr -> { . _expr ; _expr ; }
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 61

state 39

    (33) _expr -> LET . OBJECTID : TYPEID , _listalet
    (34) _expr -> LET . OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> LET . OBJECTID : TYPEID IN _expr
    (36) _expr -> LET . OBJECTID : TYPEID ASSIGN _expr IN _expr
    OBJECTID        shift and go to state 62


state 40

    (37) _expr -> WHILE . _expr LOOP _expr POOL
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 63

state 41

    (38) _expr -> IF . _expr THEN _expr ELSE _expr FI
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 64

state 42

    (42) _expr -> CASE . _expr OF _lista_case + ESAC
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 65

state 43

    (43) _expr -> NEW . OBJECTID
    OBJECTID        shift and go to state 66


state 44

    (13) _formal -> OBJECTID : TYPEID .
    ,               reduce using rule 13 (_formal -> OBJECTID : TYPEID .)
    )               reduce using rule 13 (_formal -> OBJECTID : TYPEID .)


state 45

    (9) _feature -> OBJECTID ( _formal_list ) : . TYPEID { _expr }
    TYPEID          shift and go to state 67


state 46

    (12) _formal_list -> _formal , _formal_list .
    )               reduce using rule 12 (_formal_list -> _formal , _formal_list .)


state 47

    (41) _expr -> _expr ASSIGN . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 68

state 48

    (18) _expr -> _expr = . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 69

state 49

    (19) _expr -> _expr LE . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 70

state 50

    (20) _expr -> _expr < . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 71

state 51

    (21) _expr -> _expr / . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 72

state 52

    (22) _expr -> _expr * . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 73

state 53

    (23) _expr -> _expr - . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 74

state 54

    (24) _expr -> _expr + . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 75

state 55

    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    OBJECTID        shift and go to state 76


state 56

    (40) _expr -> _expr @ . TYPEID . OBJECTID ( _expr_list )
    TYPEID          shift and go to state 77


state 57

    (17) _expr -> ( _expr . )
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    )               shift and go to state 78
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 58

    (29) _expr -> ISVOID _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 29 (_expr -> ISVOID _expr .)
    LE              reduce using rule 29 (_expr -> ISVOID _expr .)
    <               reduce using rule 29 (_expr -> ISVOID _expr .)
    /               reduce using rule 29 (_expr -> ISVOID _expr .)
    *               reduce using rule 29 (_expr -> ISVOID _expr .)
    -               reduce using rule 29 (_expr -> ISVOID _expr .)
    +               reduce using rule 29 (_expr -> ISVOID _expr .)
    ASSIGN          reduce using rule 29 (_expr -> ISVOID _expr .)
    ;               reduce using rule 29 (_expr -> ISVOID _expr .)
    )               reduce using rule 29 (_expr -> ISVOID _expr .)
    LOOP            reduce using rule 29 (_expr -> ISVOID _expr .)
    THEN            reduce using rule 29 (_expr -> ISVOID _expr .)
    OF              reduce using rule 29 (_expr -> ISVOID _expr .)
    POOL            reduce using rule 29 (_expr -> ISVOID _expr .)
    ELSE            reduce using rule 29 (_expr -> ISVOID _expr .)
    }               reduce using rule 29 (_expr -> ISVOID _expr .)
    ,               reduce using rule 29 (_expr -> ISVOID _expr .)
    IN              reduce using rule 29 (_expr -> ISVOID _expr .)
    FI              reduce using rule 29 (_expr -> ISVOID _expr .)
    .               shift and go to state 55
    @               shift and go to state 56


state 59

    (30) _expr -> NOT _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    /               reduce using rule 30 (_expr -> NOT _expr .)
    *               reduce using rule 30 (_expr -> NOT _expr .)
    ASSIGN          reduce using rule 30 (_expr -> NOT _expr .)
    ;               reduce using rule 30 (_expr -> NOT _expr .)
    )               reduce using rule 30 (_expr -> NOT _expr .)
    LOOP            reduce using rule 30 (_expr -> NOT _expr .)
    THEN            reduce using rule 30 (_expr -> NOT _expr .)
    OF              reduce using rule 30 (_expr -> NOT _expr .)
    POOL            reduce using rule 30 (_expr -> NOT _expr .)
    ELSE            reduce using rule 30 (_expr -> NOT _expr .)
    }               reduce using rule 30 (_expr -> NOT _expr .)
    ,               reduce using rule 30 (_expr -> NOT _expr .)
    IN              reduce using rule 30 (_expr -> NOT _expr .)
    FI              reduce using rule 30 (_expr -> NOT _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56


state 60

    (31) _expr -> ~ _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 31 (_expr -> ~ _expr .)
    LE              reduce using rule 31 (_expr -> ~ _expr .)
    <               reduce using rule 31 (_expr -> ~ _expr .)
    /               reduce using rule 31 (_expr -> ~ _expr .)
    *               reduce using rule 31 (_expr -> ~ _expr .)
    -               reduce using rule 31 (_expr -> ~ _expr .)
    +               reduce using rule 31 (_expr -> ~ _expr .)
    ASSIGN          reduce using rule 31 (_expr -> ~ _expr .)
    ;               reduce using rule 31 (_expr -> ~ _expr .)
    )               reduce using rule 31 (_expr -> ~ _expr .)
    LOOP            reduce using rule 31 (_expr -> ~ _expr .)
    THEN            reduce using rule 31 (_expr -> ~ _expr .)
    OF              reduce using rule 31 (_expr -> ~ _expr .)
    POOL            reduce using rule 31 (_expr -> ~ _expr .)
    ELSE            reduce using rule 31 (_expr -> ~ _expr .)
    }               reduce using rule 31 (_expr -> ~ _expr .)
    ,               reduce using rule 31 (_expr -> ~ _expr .)
    IN              reduce using rule 31 (_expr -> ~ _expr .)
    FI              reduce using rule 31 (_expr -> ~ _expr .)
    .               shift and go to state 55
    @               shift and go to state 56


state 61

    (32) _expr -> { _expr . ; _expr ; }
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    ;               shift and go to state 79
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 62

    (33) _expr -> LET OBJECTID . : TYPEID , _listalet
    (34) _expr -> LET OBJECTID . : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> LET OBJECTID . : TYPEID IN _expr
    (36) _expr -> LET OBJECTID . : TYPEID ASSIGN _expr IN _expr
    :               shift and go to state 80


state 63

    (37) _expr -> WHILE _expr . LOOP _expr POOL
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    LOOP            shift and go to state 81
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 64

    (38) _expr -> IF _expr . THEN _expr ELSE _expr FI
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    THEN            shift and go to state 82
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 65

    (42) _expr -> CASE _expr . OF _lista_case + ESAC
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    OF              shift and go to state 83
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 66

    (43) _expr -> NEW OBJECTID .
    =               reduce using rule 43 (_expr -> NEW OBJECTID .)
    LE              reduce using rule 43 (_expr -> NEW OBJECTID .)
    <               reduce using rule 43 (_expr -> NEW OBJECTID .)
    /               reduce using rule 43 (_expr -> NEW OBJECTID .)
    *               reduce using rule 43 (_expr -> NEW OBJECTID .)
    -               reduce using rule 43 (_expr -> NEW OBJECTID .)
    +               reduce using rule 43 (_expr -> NEW OBJECTID .)
    .               reduce using rule 43 (_expr -> NEW OBJECTID .)
    @               reduce using rule 43 (_expr -> NEW OBJECTID .)
    ASSIGN          reduce using rule 43 (_expr -> NEW OBJECTID .)
    ;               reduce using rule 43 (_expr -> NEW OBJECTID .)
    )               reduce using rule 43 (_expr -> NEW OBJECTID .)
    LOOP            reduce using rule 43 (_expr -> NEW OBJECTID .)
    THEN            reduce using rule 43 (_expr -> NEW OBJECTID .)
    OF              reduce using rule 43 (_expr -> NEW OBJECTID .)
    POOL            reduce using rule 43 (_expr -> NEW OBJECTID .)
    ELSE            reduce using rule 43 (_expr -> NEW OBJECTID .)
    }               reduce using rule 43 (_expr -> NEW OBJECTID .)
    ,               reduce using rule 43 (_expr -> NEW OBJECTID .)
    IN              reduce using rule 43 (_expr -> NEW OBJECTID .)
    FI              reduce using rule 43 (_expr -> NEW OBJECTID .)


state 67

    (9) _feature -> OBJECTID ( _formal_list ) : TYPEID . { _expr }
    {               shift and go to state 84


state 68

    (41) _expr -> _expr ASSIGN _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    /               reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    *               reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    ASSIGN          reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    ;               reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    )               reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    LOOP            reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    THEN            reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    OF              reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    POOL            reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    ELSE            reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    }               reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    ,               reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    IN              reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    FI              reduce using rule 41 (_expr -> _expr ASSIGN _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56


state 69

    (18) _expr -> _expr = _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 18 (_expr -> _expr = _expr .)
    LE              reduce using rule 18 (_expr -> _expr = _expr .)
    <               reduce using rule 18 (_expr -> _expr = _expr .)
    /               reduce using rule 18 (_expr -> _expr = _expr .)
    *               reduce using rule 18 (_expr -> _expr = _expr .)
    ASSIGN          reduce using rule 18 (_expr -> _expr = _expr .)
    ;               reduce using rule 18 (_expr -> _expr = _expr .)
    )               reduce using rule 18 (_expr -> _expr = _expr .)
    LOOP            reduce using rule 18 (_expr -> _expr = _expr .)
    THEN            reduce using rule 18 (_expr -> _expr = _expr .)
    OF              reduce using rule 18 (_expr -> _expr = _expr .)
    POOL            reduce using rule 18 (_expr -> _expr = _expr .)
    ELSE            reduce using rule 18 (_expr -> _expr = _expr .)
    }               reduce using rule 18 (_expr -> _expr = _expr .)
    ,               reduce using rule 18 (_expr -> _expr = _expr .)
    IN              reduce using rule 18 (_expr -> _expr = _expr .)
    FI              reduce using rule 18 (_expr -> _expr = _expr .)
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56


state 70

    (19) _expr -> _expr LE _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 19 (_expr -> _expr LE _expr .)
    LE              reduce using rule 19 (_expr -> _expr LE _expr .)
    <               reduce using rule 19 (_expr -> _expr LE _expr .)
    /               reduce using rule 19 (_expr -> _expr LE _expr .)
    *               reduce using rule 19 (_expr -> _expr LE _expr .)
    ASSIGN          reduce using rule 19 (_expr -> _expr LE _expr .)
    ;               reduce using rule 19 (_expr -> _expr LE _expr .)
    )               reduce using rule 19 (_expr -> _expr LE _expr .)
    LOOP            reduce using rule 19 (_expr -> _expr LE _expr .)
    THEN            reduce using rule 19 (_expr -> _expr LE _expr .)
    OF              reduce using rule 19 (_expr -> _expr LE _expr .)
    POOL            reduce using rule 19 (_expr -> _expr LE _expr .)
    ELSE            reduce using rule 19 (_expr -> _expr LE _expr .)
    }               reduce using rule 19 (_expr -> _expr LE _expr .)
    ,               reduce using rule 19 (_expr -> _expr LE _expr .)
    IN              reduce using rule 19 (_expr -> _expr LE _expr .)
    FI              reduce using rule 19 (_expr -> _expr LE _expr .)
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56


state 71

    (20) _expr -> _expr < _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 20 (_expr -> _expr < _expr .)
    LE              reduce using rule 20 (_expr -> _expr < _expr .)
    <               reduce using rule 20 (_expr -> _expr < _expr .)
    /               reduce using rule 20 (_expr -> _expr < _expr .)
    *               reduce using rule 20 (_expr -> _expr < _expr .)
    ASSIGN          reduce using rule 20 (_expr -> _expr < _expr .)
    ;               reduce using rule 20 (_expr -> _expr < _expr .)
    )               reduce using rule 20 (_expr -> _expr < _expr .)
    LOOP            reduce using rule 20 (_expr -> _expr < _expr .)
    THEN            reduce using rule 20 (_expr -> _expr < _expr .)
    OF              reduce using rule 20 (_expr -> _expr < _expr .)
    POOL            reduce using rule 20 (_expr -> _expr < _expr .)
    ELSE            reduce using rule 20 (_expr -> _expr < _expr .)
    }               reduce using rule 20 (_expr -> _expr < _expr .)
    ,               reduce using rule 20 (_expr -> _expr < _expr .)
    IN              reduce using rule 20 (_expr -> _expr < _expr .)
    FI              reduce using rule 20 (_expr -> _expr < _expr .)
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56


state 72

    (21) _expr -> _expr / _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    ;               reduce using rule 21 (_expr -> _expr / _expr .)
    )               reduce using rule 21 (_expr -> _expr / _expr .)
    LOOP            reduce using rule 21 (_expr -> _expr / _expr .)
    THEN            reduce using rule 21 (_expr -> _expr / _expr .)
    OF              reduce using rule 21 (_expr -> _expr / _expr .)
    POOL            reduce using rule 21 (_expr -> _expr / _expr .)
    ELSE            reduce using rule 21 (_expr -> _expr / _expr .)
    }               reduce using rule 21 (_expr -> _expr / _expr .)
    ,               reduce using rule 21 (_expr -> _expr / _expr .)
    IN              reduce using rule 21 (_expr -> _expr / _expr .)
    FI              reduce using rule 21 (_expr -> _expr / _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 73

    (22) _expr -> _expr * _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    ;               reduce using rule 22 (_expr -> _expr * _expr .)
    )               reduce using rule 22 (_expr -> _expr * _expr .)
    LOOP            reduce using rule 22 (_expr -> _expr * _expr .)
    THEN            reduce using rule 22 (_expr -> _expr * _expr .)
    OF              reduce using rule 22 (_expr -> _expr * _expr .)
    POOL            reduce using rule 22 (_expr -> _expr * _expr .)
    ELSE            reduce using rule 22 (_expr -> _expr * _expr .)
    }               reduce using rule 22 (_expr -> _expr * _expr .)
    ,               reduce using rule 22 (_expr -> _expr * _expr .)
    IN              reduce using rule 22 (_expr -> _expr * _expr .)
    FI              reduce using rule 22 (_expr -> _expr * _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 74

    (23) _expr -> _expr - _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 23 (_expr -> _expr - _expr .)
    LE              reduce using rule 23 (_expr -> _expr - _expr .)
    <               reduce using rule 23 (_expr -> _expr - _expr .)
    /               reduce using rule 23 (_expr -> _expr - _expr .)
    *               reduce using rule 23 (_expr -> _expr - _expr .)
    -               reduce using rule 23 (_expr -> _expr - _expr .)
    +               reduce using rule 23 (_expr -> _expr - _expr .)
    ASSIGN          reduce using rule 23 (_expr -> _expr - _expr .)
    ;               reduce using rule 23 (_expr -> _expr - _expr .)
    )               reduce using rule 23 (_expr -> _expr - _expr .)
    LOOP            reduce using rule 23 (_expr -> _expr - _expr .)
    THEN            reduce using rule 23 (_expr -> _expr - _expr .)
    OF              reduce using rule 23 (_expr -> _expr - _expr .)
    POOL            reduce using rule 23 (_expr -> _expr - _expr .)
    ELSE            reduce using rule 23 (_expr -> _expr - _expr .)
    }               reduce using rule 23 (_expr -> _expr - _expr .)
    ,               reduce using rule 23 (_expr -> _expr - _expr .)
    IN              reduce using rule 23 (_expr -> _expr - _expr .)
    FI              reduce using rule 23 (_expr -> _expr - _expr .)
    .               shift and go to state 55
    @               shift and go to state 56


state 75

    (24) _expr -> _expr + _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    =               reduce using rule 24 (_expr -> _expr + _expr .)
    LE              reduce using rule 24 (_expr -> _expr + _expr .)
    <               reduce using rule 24 (_expr -> _expr + _expr .)
    /               reduce using rule 24 (_expr -> _expr + _expr .)
    *               reduce using rule 24 (_expr -> _expr + _expr .)
    -               reduce using rule 24 (_expr -> _expr + _expr .)
    +               reduce using rule 24 (_expr -> _expr + _expr .)
    ASSIGN          reduce using rule 24 (_expr -> _expr + _expr .)
    ;               reduce using rule 24 (_expr -> _expr + _expr .)
    )               reduce using rule 24 (_expr -> _expr + _expr .)
    LOOP            reduce using rule 24 (_expr -> _expr + _expr .)
    THEN            reduce using rule 24 (_expr -> _expr + _expr .)
    OF              reduce using rule 24 (_expr -> _expr + _expr .)
    POOL            reduce using rule 24 (_expr -> _expr + _expr .)
    ELSE            reduce using rule 24 (_expr -> _expr + _expr .)
    }               reduce using rule 24 (_expr -> _expr + _expr .)
    ,               reduce using rule 24 (_expr -> _expr + _expr .)
    IN              reduce using rule 24 (_expr -> _expr + _expr .)
    FI              reduce using rule 24 (_expr -> _expr + _expr .)
    .               shift and go to state 55
    @               shift and go to state 56


state 76

    (39) _expr -> _expr . OBJECTID . ( _expr_list )
    (               shift and go to state 85


state 77

    (40) _expr -> _expr @ TYPEID . . OBJECTID ( _expr_list )
    .               shift and go to state 86


state 78

    (17) _expr -> ( _expr ) .
    =               reduce using rule 17 (_expr -> ( _expr ) .)
    LE              reduce using rule 17 (_expr -> ( _expr ) .)
    <               reduce using rule 17 (_expr -> ( _expr ) .)
    /               reduce using rule 17 (_expr -> ( _expr ) .)
    *               reduce using rule 17 (_expr -> ( _expr ) .)
    -               reduce using rule 17 (_expr -> ( _expr ) .)
    +               reduce using rule 17 (_expr -> ( _expr ) .)
    .               reduce using rule 17 (_expr -> ( _expr ) .)
    @               reduce using rule 17 (_expr -> ( _expr ) .)
    ASSIGN          reduce using rule 17 (_expr -> ( _expr ) .)
    ;               reduce using rule 17 (_expr -> ( _expr ) .)
    )               reduce using rule 17 (_expr -> ( _expr ) .)
    LOOP            reduce using rule 17 (_expr -> ( _expr ) .)
    THEN            reduce using rule 17 (_expr -> ( _expr ) .)
    OF              reduce using rule 17 (_expr -> ( _expr ) .)
    POOL            reduce using rule 17 (_expr -> ( _expr ) .)
    ELSE            reduce using rule 17 (_expr -> ( _expr ) .)
    }               reduce using rule 17 (_expr -> ( _expr ) .)
    ,               reduce using rule 17 (_expr -> ( _expr ) .)
    IN              reduce using rule 17 (_expr -> ( _expr ) .)
    FI              reduce using rule 17 (_expr -> ( _expr ) .)


state 79

    (32) _expr -> { _expr ; . _expr ; }
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 87

state 80

    (33) _expr -> LET OBJECTID : . TYPEID , _listalet
    (34) _expr -> LET OBJECTID : . TYPEID ASSIGN _expr , _listalet
    (35) _expr -> LET OBJECTID : . TYPEID IN _expr
    (36) _expr -> LET OBJECTID : . TYPEID ASSIGN _expr IN _expr
    TYPEID          shift and go to state 88


state 81

    (37) _expr -> WHILE _expr LOOP . _expr POOL
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 89

state 82

    (38) _expr -> IF _expr THEN . _expr ELSE _expr FI
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 90

state 83

    (42) _expr -> CASE _expr OF . _lista_case + ESAC
    (45) _lista_case -> .
    (46) _lista_case -> . _rama_case ; _lista_case
    (44) _rama_case -> . OBJECTID : TYPEID DARROW _expr
    +               reduce using rule 45 (_lista_case -> .)
    OBJECTID        shift and go to state 93

    _lista_case                    shift and go to state 91
    _rama_case                     shift and go to state 92

state 84

    (9) _feature -> OBJECTID ( _formal_list ) : TYPEID { . _expr }
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 94

state 85

    (39) _expr -> _expr . OBJECTID ( . _expr_list )
    (14) _expr_list -> .
    (15) _expr_list -> . _expr
    (16) _expr_list -> . _expr , _expr_list
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    )               reduce using rule 14 (_expr_list -> .)
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 95
    _expr_list                     shift and go to state 96

state 86

    (40) _expr -> _expr @ TYPEID . . OBJECTID ( _expr_list )
    OBJECTID        shift and go to state 97


state 87

    (32) _expr -> { _expr ; _expr . ; }
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    ;               shift and go to state 98
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 88

    (33) _expr -> LET OBJECTID : TYPEID . , _listalet
    (34) _expr -> LET OBJECTID : TYPEID . ASSIGN _expr , _listalet
    (35) _expr -> LET OBJECTID : TYPEID . IN _expr
    (36) _expr -> LET OBJECTID : TYPEID . ASSIGN _expr IN _expr
    ,               shift and go to state 99
    ASSIGN          shift and go to state 100
    IN              shift and go to state 101


state 89

    (37) _expr -> WHILE _expr LOOP _expr . POOL
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    POOL            shift and go to state 102
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 90

    (38) _expr -> IF _expr THEN _expr . ELSE _expr FI
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    ELSE            shift and go to state 103
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 91

    (42) _expr -> CASE _expr OF _lista_case . + ESAC
    +               shift and go to state 104


state 92

    (46) _lista_case -> _rama_case . ; _lista_case
    ;               shift and go to state 105


state 93

    (44) _rama_case -> OBJECTID . : TYPEID DARROW _expr
    :               shift and go to state 106


state 94

    (9) _feature -> OBJECTID ( _formal_list ) : TYPEID { _expr . }
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    }               shift and go to state 107
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 95

    (15) _expr_list -> _expr .
    (16) _expr_list -> _expr . , _expr_list
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    )               reduce using rule 15 (_expr_list -> _expr .)
    ,               shift and go to state 108
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 96

    (39) _expr -> _expr . OBJECTID ( _expr_list . )
    )               shift and go to state 109


state 97

    (40) _expr -> _expr @ TYPEID . OBJECTID . ( _expr_list )
    (               shift and go to state 110


state 98

    (32) _expr -> { _expr ; _expr ; . }
    }               shift and go to state 111


state 99

    (33) _expr -> LET OBJECTID : TYPEID , . _listalet
    (47) _listalet -> . OBJECTID : TYPEID IN _expr
    (48) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (49) _listalet -> . OBJECTID : TYPEID , _listalet
    (50) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 112

    _listalet                      shift and go to state 113

state 100

    (34) _expr -> LET OBJECTID : TYPEID ASSIGN . _expr , _listalet
    (36) _expr -> LET OBJECTID : TYPEID ASSIGN . _expr IN _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 114

state 101

    (35) _expr -> LET OBJECTID : TYPEID IN . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 115

state 102

    (37) _expr -> WHILE _expr LOOP _expr POOL .
    =               reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    LE              reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    <               reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    /               reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    *               reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    -               reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    +               reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    .               reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    @               reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    ASSIGN          reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    ;               reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    )               reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    LOOP            reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    THEN            reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    OF              reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    POOL            reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    ELSE            reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    }               reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    ,               reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    IN              reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)
    FI              reduce using rule 37 (_expr -> WHILE _expr LOOP _expr POOL .)


state 103

    (38) _expr -> IF _expr THEN _expr ELSE . _expr FI
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 116

state 104

    (42) _expr -> CASE _expr OF _lista_case + . ESAC
    ESAC            shift and go to state 117


state 105

    (46) _lista_case -> _rama_case ; . _lista_case
    (45) _lista_case -> .
    (46) _lista_case -> . _rama_case ; _lista_case
    (44) _rama_case -> . OBJECTID : TYPEID DARROW _expr
    +               reduce using rule 45 (_lista_case -> .)
    OBJECTID        shift and go to state 93

    _rama_case                     shift and go to state 92
    _lista_case                    shift and go to state 118

state 106

    (44) _rama_case -> OBJECTID : . TYPEID DARROW _expr
    TYPEID          shift and go to state 119


state 107

    (9) _feature -> OBJECTID ( _formal_list ) : TYPEID { _expr } .
    ;               reduce using rule 9 (_feature -> OBJECTID ( _formal_list ) : TYPEID { _expr } .)


state 108

    (16) _expr_list -> _expr , . _expr_list
    (14) _expr_list -> .
    (15) _expr_list -> . _expr
    (16) _expr_list -> . _expr , _expr_list
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    )               reduce using rule 14 (_expr_list -> .)
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 95
    _expr_list                     shift and go to state 120

state 109

    (39) _expr -> _expr . OBJECTID ( _expr_list ) .
    =               reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    LE              reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    <               reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    /               reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    *               reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    -               reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    +               reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    .               reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    @               reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    ASSIGN          reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    ;               reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    )               reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    LOOP            reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    THEN            reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    OF              reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    POOL            reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    ELSE            reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    }               reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    ,               reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    IN              reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)
    FI              reduce using rule 39 (_expr -> _expr . OBJECTID ( _expr_list ) .)


state 110

    (40) _expr -> _expr @ TYPEID . OBJECTID ( . _expr_list )
    (14) _expr_list -> .
    (15) _expr_list -> . _expr
    (16) _expr_list -> . _expr , _expr_list
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    )               reduce using rule 14 (_expr_list -> .)
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 95
    _expr_list                     shift and go to state 121

state 111

    (32) _expr -> { _expr ; _expr ; } .
    =               reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    LE              reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    <               reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    /               reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    *               reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    -               reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    +               reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    .               reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    @               reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    ASSIGN          reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    ;               reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    )               reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    LOOP            reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    THEN            reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    OF              reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    POOL            reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    ELSE            reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    }               reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    ,               reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    IN              reduce using rule 32 (_expr -> { _expr ; _expr ; } .)
    FI              reduce using rule 32 (_expr -> { _expr ; _expr ; } .)


state 112

    (47) _listalet -> OBJECTID . : TYPEID IN _expr
    (48) _listalet -> OBJECTID . : TYPEID ASSIGN _expr IN _expr
    (49) _listalet -> OBJECTID . : TYPEID , _listalet
    (50) _listalet -> OBJECTID . : TYPEID ASSIGN _expr , _listalet
    :               shift and go to state 122


state 113

    (33) _expr -> LET OBJECTID : TYPEID , _listalet .
    =               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    LE              reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    <               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    /               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    *               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    -               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    +               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    .               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    @               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    ASSIGN          reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    ;               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    )               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    LOOP            reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    THEN            reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    OF              reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    POOL            reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    ELSE            reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    }               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    ,               reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    IN              reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)
    FI              reduce using rule 33 (_expr -> LET OBJECTID : TYPEID , _listalet .)


state 114

    (34) _expr -> LET OBJECTID : TYPEID ASSIGN _expr . , _listalet
    (36) _expr -> LET OBJECTID : TYPEID ASSIGN _expr . IN _expr
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    ,               shift and go to state 123
    IN              shift and go to state 124
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 115

    (35) _expr -> LET OBJECTID : TYPEID IN _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    ;               reduce using rule 35 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    )               reduce using rule 35 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    LOOP            reduce using rule 35 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    THEN            reduce using rule 35 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    OF              reduce using rule 35 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    POOL            reduce using rule 35 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    ELSE            reduce using rule 35 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    }               reduce using rule 35 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    ,               reduce using rule 35 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    IN              reduce using rule 35 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    FI              reduce using rule 35 (_expr -> LET OBJECTID : TYPEID IN _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 116

    (38) _expr -> IF _expr THEN _expr ELSE _expr . FI
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    FI              shift and go to state 125
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 117

    (42) _expr -> CASE _expr OF _lista_case + ESAC .
    =               reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    LE              reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    <               reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    /               reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    *               reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    -               reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    +               reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    .               reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    @               reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    ASSIGN          reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    ;               reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    )               reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    LOOP            reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    THEN            reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    OF              reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    POOL            reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    ELSE            reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    }               reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    ,               reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    IN              reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)
    FI              reduce using rule 42 (_expr -> CASE _expr OF _lista_case + ESAC .)


state 118

    (46) _lista_case -> _rama_case ; _lista_case .
    +               reduce using rule 46 (_lista_case -> _rama_case ; _lista_case .)


state 119

    (44) _rama_case -> OBJECTID : TYPEID . DARROW _expr
    DARROW          shift and go to state 126


state 120

    (16) _expr_list -> _expr , _expr_list .
    )               reduce using rule 16 (_expr_list -> _expr , _expr_list .)


state 121

    (40) _expr -> _expr @ TYPEID . OBJECTID ( _expr_list . )
    )               shift and go to state 127


state 122

    (47) _listalet -> OBJECTID : . TYPEID IN _expr
    (48) _listalet -> OBJECTID : . TYPEID ASSIGN _expr IN _expr
    (49) _listalet -> OBJECTID : . TYPEID , _listalet
    (50) _listalet -> OBJECTID : . TYPEID ASSIGN _expr , _listalet
    TYPEID          shift and go to state 128


state 123

    (34) _expr -> LET OBJECTID : TYPEID ASSIGN _expr , . _listalet
    (47) _listalet -> . OBJECTID : TYPEID IN _expr
    (48) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (49) _listalet -> . OBJECTID : TYPEID , _listalet
    (50) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 112

    _listalet                      shift and go to state 129

state 124

    (36) _expr -> LET OBJECTID : TYPEID ASSIGN _expr IN . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 130

state 125

    (38) _expr -> IF _expr THEN _expr ELSE _expr FI .
    =               reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    LE              reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    <               reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    /               reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    *               reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    -               reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    +               reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    .               reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    @               reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    ASSIGN          reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    ;               reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    )               reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    LOOP            reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    THEN            reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    OF              reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    POOL            reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    ELSE            reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    }               reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    ,               reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    IN              reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)
    FI              reduce using rule 38 (_expr -> IF _expr THEN _expr ELSE _expr FI .)


state 126

    (44) _rama_case -> OBJECTID : TYPEID DARROW . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 131

state 127

    (40) _expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .
    =               reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    LE              reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    <               reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    /               reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    *               reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    -               reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    +               reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    .               reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    @               reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    ASSIGN          reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    ;               reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    )               reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    LOOP            reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    THEN            reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    OF              reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    POOL            reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    ELSE            reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    }               reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    ,               reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    IN              reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)
    FI              reduce using rule 40 (_expr -> _expr @ TYPEID . OBJECTID ( _expr_list ) .)


state 128

    (47) _listalet -> OBJECTID : TYPEID . IN _expr
    (48) _listalet -> OBJECTID : TYPEID . ASSIGN _expr IN _expr
    (49) _listalet -> OBJECTID : TYPEID . , _listalet
    (50) _listalet -> OBJECTID : TYPEID . ASSIGN _expr , _listalet
    IN              shift and go to state 132
    ASSIGN          shift and go to state 133
    ,               shift and go to state 134


state 129

    (34) _expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .
    =               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    LE              reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    <               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    /               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    *               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    -               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    +               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    .               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    @               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ASSIGN          reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ;               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    )               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    LOOP            reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    THEN            reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    OF              reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    POOL            reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ELSE            reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    }               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ,               reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    IN              reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    FI              reduce using rule 34 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr , _listalet .)


state 130

    (36) _expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    ;               reduce using rule 36 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    )               reduce using rule 36 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    LOOP            reduce using rule 36 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    THEN            reduce using rule 36 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    OF              reduce using rule 36 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    POOL            reduce using rule 36 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    ELSE            reduce using rule 36 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    }               reduce using rule 36 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    ,               reduce using rule 36 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    IN              reduce using rule 36 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    FI              reduce using rule 36 (_expr -> LET OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 131

    (44) _rama_case -> OBJECTID : TYPEID DARROW _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    ;               reduce using rule 44 (_rama_case -> OBJECTID : TYPEID DARROW _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 132

    (47) _listalet -> OBJECTID : TYPEID IN . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 135

state 133

    (48) _listalet -> OBJECTID : TYPEID ASSIGN . _expr IN _expr
    (50) _listalet -> OBJECTID : TYPEID ASSIGN . _expr , _listalet
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 136

state 134

    (49) _listalet -> OBJECTID : TYPEID , . _listalet
    (47) _listalet -> . OBJECTID : TYPEID IN _expr
    (48) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (49) _listalet -> . OBJECTID : TYPEID , _listalet
    (50) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 112

    _listalet                      shift and go to state 137

state 135

    (47) _listalet -> OBJECTID : TYPEID IN _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    ;               reduce using rule 47 (_listalet -> OBJECTID : TYPEID IN _expr .)
    )               reduce using rule 47 (_listalet -> OBJECTID : TYPEID IN _expr .)
    LOOP            reduce using rule 47 (_listalet -> OBJECTID : TYPEID IN _expr .)
    THEN            reduce using rule 47 (_listalet -> OBJECTID : TYPEID IN _expr .)
    OF              reduce using rule 47 (_listalet -> OBJECTID : TYPEID IN _expr .)
    POOL            reduce using rule 47 (_listalet -> OBJECTID : TYPEID IN _expr .)
    ELSE            reduce using rule 47 (_listalet -> OBJECTID : TYPEID IN _expr .)
    }               reduce using rule 47 (_listalet -> OBJECTID : TYPEID IN _expr .)
    ,               reduce using rule 47 (_listalet -> OBJECTID : TYPEID IN _expr .)
    IN              reduce using rule 47 (_listalet -> OBJECTID : TYPEID IN _expr .)
    FI              reduce using rule 47 (_listalet -> OBJECTID : TYPEID IN _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 136

    (48) _listalet -> OBJECTID : TYPEID ASSIGN _expr . IN _expr
    (50) _listalet -> OBJECTID : TYPEID ASSIGN _expr . , _listalet
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
    IN              shift and go to state 138
    ,               shift and go to state 139
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 137

    (49) _listalet -> OBJECTID : TYPEID , _listalet .
    =               reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    LE              reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    <               reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    /               reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    *               reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    -               reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    +               reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    .               reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    @               reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    ASSIGN          reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    ;               reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    )               reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    LOOP            reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    THEN            reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    OF              reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    POOL            reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    ELSE            reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    }               reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    ,               reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    IN              reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)
    FI              reduce using rule 49 (_listalet -> OBJECTID : TYPEID , _listalet .)


state 138

    (48) _listalet -> OBJECTID : TYPEID ASSIGN _expr IN . _expr
    (17) _expr -> . ( _expr )
    (18) _expr -> . _expr = _expr
    (19) _expr -> . _expr LE _expr
    (20) _expr -> . _expr < _expr
    (21) _expr -> . _expr / _expr
    (22) _expr -> . _expr * _expr
    (23) _expr -> . _expr - _expr
    (24) _expr -> . _expr + _expr
    (25) _expr -> . BOOL_CONST
    (26) _expr -> . STR_CONST
    (27) _expr -> . INT_CONST
    (28) _expr -> . OBJECTID
    (29) _expr -> . ISVOID _expr
    (30) _expr -> . NOT _expr
    (31) _expr -> . ~ _expr
    (32) _expr -> . { _expr ; _expr ; }
    (33) _expr -> . LET OBJECTID : TYPEID , _listalet
    (34) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr , _listalet
    (35) _expr -> . LET OBJECTID : TYPEID IN _expr
    (36) _expr -> . LET OBJECTID : TYPEID ASSIGN _expr IN _expr
    (37) _expr -> . WHILE _expr LOOP _expr POOL
    (38) _expr -> . IF _expr THEN _expr ELSE _expr FI
    (39) _expr -> . _expr . OBJECTID ( _expr_list )
    (40) _expr -> . _expr @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> . _expr ASSIGN _expr
    (42) _expr -> . CASE _expr OF _lista_case + ESAC
    (43) _expr -> . NEW OBJECTID
    (               shift and go to state 31
    BOOL_CONST      shift and go to state 32
    STR_CONST       shift and go to state 33
    INT_CONST       shift and go to state 34
    OBJECTID        shift and go to state 29
    ISVOID          shift and go to state 35
    NOT             shift and go to state 36
    ~               shift and go to state 37
    {               shift and go to state 38
    LET             shift and go to state 39
    WHILE           shift and go to state 40
    IF              shift and go to state 41
    CASE            shift and go to state 42
    NEW             shift and go to state 43

    _expr                          shift and go to state 140

state 139

    (50) _listalet -> OBJECTID : TYPEID ASSIGN _expr , . _listalet
    (47) _listalet -> . OBJECTID : TYPEID IN _expr
    (48) _listalet -> . OBJECTID : TYPEID ASSIGN _expr IN _expr
    (49) _listalet -> . OBJECTID : TYPEID , _listalet
    (50) _listalet -> . OBJECTID : TYPEID ASSIGN _expr , _listalet
    OBJECTID        shift and go to state 112

    _listalet                      shift and go to state 141

state 140

    (48) _listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .
    (18) _expr -> _expr . = _expr
    (19) _expr -> _expr . LE _expr
    (20) _expr -> _expr . < _expr
    (21) _expr -> _expr . / _expr
    (22) _expr -> _expr . * _expr
    (23) _expr -> _expr . - _expr
    (24) _expr -> _expr . + _expr
    (39) _expr -> _expr . . OBJECTID ( _expr_list )
    (40) _expr -> _expr . @ TYPEID . OBJECTID ( _expr_list )
    (41) _expr -> _expr . ASSIGN _expr
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    ;               reduce using rule 48 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    )               reduce using rule 48 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    LOOP            reduce using rule 48 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    THEN            reduce using rule 48 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    OF              reduce using rule 48 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    POOL            reduce using rule 48 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    ELSE            reduce using rule 48 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    }               reduce using rule 48 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    ,               reduce using rule 48 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    IN              reduce using rule 48 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    FI              reduce using rule 48 (_listalet -> OBJECTID : TYPEID ASSIGN _expr IN _expr .)
    =               shift and go to state 48
    LE              shift and go to state 49
    <               shift and go to state 50
    /               shift and go to state 51
    *               shift and go to state 52
    -               shift and go to state 53
    +               shift and go to state 54
    .               shift and go to state 55
    @               shift and go to state 56
    ASSIGN          shift and go to state 47


state 141

    (50) _listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .
    =               reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    LE              reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    <               reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    /               reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    *               reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    -               reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    +               reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    .               reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    @               reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ASSIGN          reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ;               reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    )               reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    LOOP            reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    THEN            reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    OF              reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    POOL            reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ELSE            reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    }               reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    ,               reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    IN              reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)
    FI              reduce using rule 50 (_listalet -> OBJECTID : TYPEID ASSIGN _expr , _listalet .)


Conflicts:

shift/reduce conflict for = in state 72 resolved as shift
shift/reduce conflict for LE in state 72 resolved as shift
shift/reduce conflict for < in state 72 resolved as shift
shift/reduce conflict for / in state 72 resolved as shift
shift/reduce conflict for * in state 72 resolved as shift
shift/reduce conflict for - in state 72 resolved as shift
shift/reduce conflict for + in state 72 resolved as shift
shift/reduce conflict for . in state 72 resolved as shift
shift/reduce conflict for @ in state 72 resolved as shift
shift/reduce conflict for ASSIGN in state 72 resolved as shift
shift/reduce conflict for = in state 73 resolved as shift
shift/reduce conflict for LE in state 73 resolved as shift
shift/reduce conflict for < in state 73 resolved as shift
shift/reduce conflict for / in state 73 resolved as shift
shift/reduce conflict for * in state 73 resolved as shift
shift/reduce conflict for - in state 73 resolved as shift
shift/reduce conflict for + in state 73 resolved as shift
shift/reduce conflict for . in state 73 resolved as shift
shift/reduce conflict for @ in state 73 resolved as shift
shift/reduce conflict for ASSIGN in state 73 resolved as shift
shift/reduce conflict for = in state 115 resolved as shift
shift/reduce conflict for LE in state 115 resolved as shift
shift/reduce conflict for < in state 115 resolved as shift
shift/reduce conflict for / in state 115 resolved as shift
shift/reduce conflict for * in state 115 resolved as shift
shift/reduce conflict for - in state 115 resolved as shift
shift/reduce conflict for + in state 115 resolved as shift
shift/reduce conflict for . in state 115 resolved as shift
shift/reduce conflict for @ in state 115 resolved as shift
shift/reduce conflict for ASSIGN in state 115 resolved as shift
shift/reduce conflict for = in state 130 resolved as shift
shift/reduce conflict for LE in state 130 resolved as shift
shift/reduce conflict for < in state 130 resolved as shift
shift/reduce conflict for / in state 130 resolved as shift
shift/reduce conflict for * in state 130 resolved as shift
shift/reduce conflict for - in state 130 resolved as shift
shift/reduce conflict for + in state 130 resolved as shift
shift/reduce conflict for . in state 130 resolved as shift
shift/reduce conflict for @ in state 130 resolved as shift
shift/reduce conflict for ASSIGN in state 130 resolved as shift
shift/reduce conflict for = in state 135 resolved as shift
shift/reduce conflict for LE in state 135 resolved as shift
shift/reduce conflict for < in state 135 resolved as shift
shift/reduce conflict for / in state 135 resolved as shift
shift/reduce conflict for * in state 135 resolved as shift
shift/reduce conflict for - in state 135 resolved as shift
shift/reduce conflict for + in state 135 resolved as shift
shift/reduce conflict for . in state 135 resolved as shift
shift/reduce conflict for @ in state 135 resolved as shift
shift/reduce conflict for ASSIGN in state 135 resolved as shift
shift/reduce conflict for = in state 140 resolved as shift
shift/reduce conflict for LE in state 140 resolved as shift
shift/reduce conflict for < in state 140 resolved as shift
shift/reduce conflict for / in state 140 resolved as shift
shift/reduce conflict for * in state 140 resolved as shift
shift/reduce conflict for - in state 140 resolved as shift
shift/reduce conflict for + in state 140 resolved as shift
shift/reduce conflict for . in state 140 resolved as shift
shift/reduce conflict for @ in state 140 resolved as shift
shift/reduce conflict for ASSIGN in state 140 resolved as shift